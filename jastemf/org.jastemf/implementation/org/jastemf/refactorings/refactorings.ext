/**
 * <copyright>
 *
 * This program and the accompanying materials are made available under the
 * terms of the BSD 3-clause license which accompanies this distribution.
 *
 * </copyright>
 */
import genmodel;
import ecore;

String computePackagePath(GenClass genClass, String package):
	computePackagePath(genClass.genPackage.genModel, package);

String computePackagePath(GenModel genModel, String package):
	"/" + genModel.modelDirectory.split("/").
	withoutFirst().withoutFirst().toString("/") + "&lt;" + package;

String computeClassPath(GenClass genClass, String package):
	computeClassPath(genClass.genPackage.genModel, genClass.ecoreClass.name.toString(),package);

String computeClassPath(GenModel genModel, String class, String package):
	computePackagePath(genModel, package) + "{" + class;

String computeCompilationUnitPath(GenClass genClass, String package):
	computeCompilationUnitPath(genClass.genPackage.genModel, genClass.ecoreClass.name.toString(),package);

String computeCompilationUnitPath(GenModel genModel, String class, String package):
	computeClassPath(genModel, class, package) + ".java[" + class;

String computeProjectName(GenClass genClass):
	computeProjectName(genClass.genPackage.genModel);

String computeProjectName(GenModel genModel):
	genModel.modelDirectory.split("/").get(1);
	
String getRefactoringTypeString(EParameter parameter):
	(parameter.many?
		"Qorg.eclipse.emf.common.util.EList\\&lt;"+getRefactoringTypeString(parameter.eGenericType)+"&gt;;"		
		:getRefactoringTypeString(parameter.eGenericType))
;

String getRefactoringTypeString(EGenericType genericType):
	"Q"+genericType.eClassifier.instanceTypeName+
		(genericType.eTypeArguments.isEmpty?"":"\\&lt;"+genericType.eTypeArguments.collect(e|getRefactoringTypeString(e)).toString("")+"&gt;")+
	";"
;

String computeClassNamePattern(GenModel genModel):
	genModel.classNamePattern != null ? genModel.classNamePattern : "Impl"
;

String computeInterfaceNamePattern(GenModel genModel):
	genModel.interfaceNamePattern != null ? genModel.interfaceNamePattern : ""
;
