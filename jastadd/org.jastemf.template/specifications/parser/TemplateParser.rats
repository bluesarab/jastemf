module org.jastemf.template.TemplateParser();

header {
	import org.jastemf.template.ast.*;
	import java.io.InputStream;
	import java.io.InputStreamReader;
}


/*
 * First: the "Lexer" part 
 * 
 */

body {
	  static {
	    add(TEMPLATE_KEYWORDS, new String[] {
			"VAR","VARIANTS","PROTOTYPE"
	    });
	  }
	  
	public TemplateParser(final InputStream in) {
		    super(new InputStreamReader(in),"<resource>");
	}
}




option setOfString(TEMPLATE_KEYWORDS);


/*generic QualifiedIdentifier =
	  Identifier ( void:".":Symbol Identifier )*
	  ;
*/
String LowerIdentifier =
	    yyValue:LowerWord &{ ! TEMPLATE_KEYWORDS.contains(yyValue) }
	  ;

String UpperIdentifier =
	    yyValue:UpperWord &{ ! TEMPLATE_KEYWORDS.contains(yyValue) } 
	  ;

String Identifier = ident:Word &{ ! TEMPLATE_KEYWORDS.contains(ident) } {
			yyValue = ident;
	  };

String LowerWord = [a-z] [a-zA-Z0-9_]* ;
String UpperWord = [A-Z] [a-zA-Z0-9_]* ;
String Word = [a-zA-Z] [a-zA-Z0-9_]* ;

String Keyword =
	   yyValue:Word &{ TEMPLATE_KEYWORDS.contains(yyValue) }
;

String SlotDelimiter = "#";

String LeftDelimiter = "<?"/"[[";

String RightDelimiter = "?>"/"]]"; 

String InfixDelimiter = "::"; 

String  EscapeDelimiter = '\\';

transient String IslandContent = ( EscapeDelimiter (SlotDelimiter/LeftDelimiter/RightDelimiter)  /  !( SlotDelimiter/LeftDelimiter/RightDelimiter) _ )+ ;

void EndOfFile = !_;


/*
 * Second: Grammar Productions
 *  
 */

public GenericSource GenericSource_Declaration =  content:TemplateElements_Declaration EndOfFile
{
	yyValue = new GenericSource(content);
};


TemplateElements TemplateElements_Declaration = content:(yyValue:Island  / yyValue:Water)*  
{
	List<Element> elements = new List<Element>();
	for(Object element:content)
		elements.add((Element)element);
	yyValue = new TemplateElements(elements);
};

TextElement Water = yyValue:TextElement_Declaration
{
	
};

//match until next char is # and concatenate, afterwards try to match and concatenate the last char before #
//could also be done via post check, e.g. !{yyValue==#}, but this would hinder recovery and thus is encapsulated 
//in extra method call 
TextElement TextElement_Declaration =  value:IslandContent
{	
	yyValue = new TextElement(value.replaceAll("\\\\#","#").replaceAll("\\\\<\\?", "<?").replaceAll("\\\\\\?>", "?>").replaceAll("\\\\\\[\\[", "[[").replaceAll("\\\\\\]\\]", "]]"));	
};

RootElement Island =  yyValue:VariantList_Declaration  / yyVaule:Prototype_Declaration / yyValue:Slot_Declaration
{
		
};


Slot Slot_Declaration = SlotDelimiter name:Identifier SlotDelimiter
{
	yyValue = new Slot(name);
};


VariantList VariantList_Declaration = LeftDelimiter "VARIANTS" InfixDelimiter name:Identifier RightDelimiter content:(yyValue:Variant_Declaration / yyValue:TextElement_Declaration)* LeftDelimiter "VARIANTS" RightDelimiter
{
	List<Element> variants = new List();
	for(Object element:content)
		variants.add((Element)element);
	yyValue = new VariantList(name,variants);
};



Variant Variant_Declaration = LeftDelimiter "VAR" InfixDelimiter name:Identifier RightDelimiter content:TemplateElements_Declaration
{
	yyValue = new Variant(name,content);
};

Prototype Prototype_Declaration = LeftDelimiter "PROTOTYPE" InfixDelimiter name:Identifier RightDelimiter content:TemplateElements_Declaration LeftDelimiter "PROTOTYPE" RightDelimiter
{
	yyValue = new Prototype(name,content);
};


