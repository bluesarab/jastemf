/*
 * This file contains JastAdd code parts that are common to all Java-based backends (plain or emf).
 */
aspect ASTNodeAPI {
	
	/**
	 * Get the requested child by calling its <i>specific backend</i> model access method.
	 * @param i The child's index.
	 * @return The child, iff it exists.
	 * @throws IndexOutOfBoundsException Thrown, iff the child does not exist.
	 */
	public final ASTNode ASTNode.getChildNoTransform(int i) {
		IAccessMethods getter = resolveAccess(i);
		if (getter == null)
			throw new IndexOutOfBoundsException();
		return getter.getChild();
	}
	
	/**
	 * Set a child by calling its <i>specific backend</i> model access method.
	 * @param node The child to set.
	 * @param i The child's index.
	 * @throws IndexOutOfBoundsException Thrown, iff the child does not exist.
	 */
	public void ASTNode.setChild(T node, int i) {
		IAccessMethods setter = resolveAccess(i);
		if (setter == null)
			throw new IndexOutOfBoundsException();
		setter.setChild(node);
	}
	
	/**
	 * Insert a child by calling its <i>specific backend</i> model access method.
	 * @param node The child to insert.
	 * @param i The child's index.
	 * @throws IndexOutOfBoundsException Thrown, iff the child does not exist.
	 */
	public void ASTNode.insertChild(T node, int i) {
		if (!(this instanceof #LISTTYPE#))
			throw Exceptions.illegalInsert(this, i, node);
		#LISTTYPE# delegator = (#LISTTYPE#)this;
		delegator.delegatee.add(i, node);
		if (node != null)
			node.childIndex = i;
		for (int ii = i + 1; i < delegator.delegatee.size(); ii++) {
			ASTNode shifted = (ASTNode)delegator.delegatee.get(ii);
			if (shifted != null)
				shifted.childIndex = ii;
		}
	}

    public void ASTNode.addChild(T node) {
		if (!(this instanceof #LISTTYPE#))
			throw Exceptions.illegalInsert(this, i, node);
		#LISTTYPE# delegator = (#LISTTYPE#)this;		
		delegator.delegatee.add(node);
		if(node!=null)
			node.childIndex = delegator.delegatee.indexOf(node);
    }
    
	
	/**
	 * Remove a child by calling its <i>specific backend</i> model access method.
	 * @param i The child's index.
	 * @throws IndexOutOfBoundsException Thrown, iff the child does not exist.
	 */
	public void ASTNode.removeChild(int i) {
		if (!(this instanceof #LISTTYPE#))
			throw Exceptions.illegalRemove(this, i);
		#LISTTYPE# delegator = (#LISTTYPE#)this;
		ASTNode child = getChildNoTransform(i);
		if (child != null)
			child.childIndex = -1;
		delegator.delegatee.remove(i);
		for (int ii = i; ii < delegator.delegatee.size(); ii++) {
			ASTNode shifted = (ASTNode)delegator.delegatee.get(ii);
			if (shifted != null)
				shifted.childIndex = ii;
		}
	}
	
	
	
    public int ASTNode.getNumChild() {
    	return numChildren();
    }
    
    public final int ASTNode.getNumChildNoTransform() {
    	return numChildren();
    }	
    
	
	//other stuff from old generator follows (rewrites are always considered to be enabled,TODO: staged rewrites and debugs)
    
	public static final boolean ASTNode.generatedWithCircularEnabled = #ASTNode_circularEnabled#;
	public static final boolean ASTNode.generatedWithCacheCycle = #ASTNode_cacheCycle#;
	public static final boolean ASTNode.generatedWithComponentCheck = #ASTNode_componentCheck#;
	    
	protected static ASTNode$State ASTNode.state = new ASTNode$State();
	public final ASTNode$State ASTNode.state() { return state; }

	public boolean ASTNode.in$Circle = false;
    public boolean ASTNode.in$Circle() { return in$Circle; }
    public void ASTNode.in$Circle(boolean b) { in$Circle = b; }
    public boolean ASTNode.is$Final = false;
    public boolean ASTNode.is$Final() { return is$Final; }
    public void ASTNode.is$Final(boolean b) { is$Final = b; }
	    
    @SuppressWarnings("cast") 
    public T ASTNode.getChild(int i){
    	return (T)ASTNode.getChild(this, i);
    }  

    public static ASTNode ASTNode.getChild(ASTNode that, int i) {
    	ASTNode node = that.getChildNoTransform(i);
    	if(node.is$Final()) 
    		return node;
    	if(!node.mayHaveRewrite()) {
    		node.is$Final(that.is$Final());
    		return node;
    	}
    	if(!node.in$Circle()) {
    		int rewriteState;
    		int num = that.state().boundariesCrossed;
    		do {
    			that.state().push(ASTNode$State.REWRITE_CHANGE);
    			ASTNode oldNode = node;
    			oldNode.in$Circle(true);
    			node = node.rewriteTo();
    			if(node != oldNode)
    				that.setChild(node, i);
    			oldNode.in$Circle(false);
    			rewriteState = that.state().pop();;
    		} while(rewriteState == ASTNode$State.REWRITE_CHANGE);
    		if(rewriteState == ASTNode$State.REWRITE_NOCHANGE && that.is$Final()) {
    			node.is$Final(true);
    			that.state().boundariesCrossed = num;
    		}
    	}
    	else if(that.is$Final() != node.is$Final()) 
    		that.state().boundariesCrossed++;
    	return node;
    }
    
    /* 
	 * Replace each AST node's "copy()" method generated by JastAdd with an
	 * implementation that is not anymore based on ASTNode's "children" array.
	 * Thus, the new implementation uses the model repository instead of
	 * JastAdd's repository.
	 */
	public ASTNode ASTNode.copy() {
		try {
			return (ASTNode) clone();
		} catch (CloneNotSupportedException e) {
		}
		System.err.println("Error: Could not clone node of type "
				+ getClass().getName() + "!");
		return null;
	}
}