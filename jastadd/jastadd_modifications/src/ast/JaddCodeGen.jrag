import ast.AST.*;

import java.io.*;
import java.util.*;
import java.util.regex.*;

/**
 * The aspects in this file create the standard methods for every type in the AST.
 * 
 * For example, constructors, getChild() etc.
 * 
 */

aspect JaddCodeGen {
  public void Grammar.abstractAncestors() {
    ASTDecl cl;
    IdDecl name;
    
    // Add ASTNode
    cl = new ASTDecl();
    name = new IdDecl();
    name.setID(ASTNode.nodeName);
    cl.setIdDecl(name);
    cl.setFileName(ASTNode.nodeName+".ast");
    addTypeDecl(cl);
    
    // Add List
    cl = new ASTDecl();
    name = new IdDecl();
    name.setID(ASTNode.listName);
    cl.setIdDecl(name);
    cl.setFileName(ASTNode.listName+".ast");
    addTypeDecl(cl);

    // Add Opt
    cl = new ASTDecl();
    name = new IdDecl();
    name.setID(ASTNode.optName);
    cl.setIdDecl(name);
    cl.setFileName(ASTNode.optName+".ast");
    addTypeDecl(cl);
  }

  syn int ASTDecl.numNonNTAComponents() {
    int num = 0;
    for(Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if(!c.isNTA()) {
        num++;
      }
    }
    return num;
  }

  syn int ASTDecl.numRegularChildren() {
    int i = 0;
    for(Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if(!c.isNTA() && !(c instanceof TokenComponent)) {
        i++;
      }
    }
    return i;
  }

 
  
  
  public void ASTDecl.jjtGenConstructor(PrintWriter stream, String parserName, boolean rewriteEnabled) {
    String finalInit = "";
    if(rewriteEnabled && isRootNode()) {
      if(ASTNode.stagedRewrites)
        finalInit = "        is$Final(state().rewritePhase);\n";
      else
        finalInit = "        is$Final(true);\n";
    }
    stream.println("    // Declared in " + getFileName() + " line " + getStartLine() + "\n");
    String s = "    public #ID#.#ID_IMPL#() {\n" + // L�gg till null f�r agg, tom lista f�r list, false f�r opt
    		   "        super();\n" + 
              "#NTA#";
    String t = new String();
    int i = 0;
    for(Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if(c instanceof ListComponentsNTA) {
        //t = t + "        setChild(null, " + String.valueOf(i) + ");\n";
        i++;
      }
      if(c instanceof OptionalComponentNTA) {
        //t = t + "        setChild(new Opt(), " + String.valueOf(i) + ");\n";
        i++;
      }
      if(c instanceof AggregateComponentsNTA) {
        //t = t + "        setChild(null, " + String.valueOf(i) + ");\n";
        i++;
      }
    }
    s = s.replaceAll("#ID#", name());
    s = s.replaceAll("#ID_IMPL#", implName());
    s = s.replaceAll("#NTA#", t);
    stream.println(s);
    // Initialize node
    i = 0;
    for(Iterator iter = getComponents(); iter.hasNext(); ) {
      Components c = (Components)iter.next();
      if(c instanceof ListComponents) {
        stream.println("        setChild(new " + ASTNode.listName + "(), " + String.valueOf(i) + ");");
        i++;
      }
      else if(c instanceof OptionalComponent) {
        stream.println("        setChild(new " + ASTNode.optName + "(), " + String.valueOf(i) + ");");
        i++;
      }
      else if(c instanceof AggregateComponents) {
        //stream.println("        setChild(null, " + String.valueOf(i) + ");");
        i++;
      }
    }
    stream.println(finalInit);
    stream.println("    }\n");

    if(numNonNTAComponents() != 0) {
      stream.print(buildingConstructor());
      if(ASTNode.beaver)
        stream.print(buildingSymbolConstructor());
    }
    
    if(ASTNode.isBuiltInOpt(name())) {
      stream.println("     public " + ASTNode.optName + "." + ASTNode.optName + "(T opt) {");
      stream.println("         setChild(opt, 0);");
      stream.println("     }\n");
    }

  }
  
  public String ASTDecl.jjtGenListAPI() {
	  StringWriter stringWriter = new StringWriter();
	  PrintWriter stream = new PrintWriter(stringWriter);
      stream.println("     public #LISTTYPE#<T> #LISTTYPE#.add(T node) {");
      if(debugMode) {
          stream.println("        if(node instanceof #LISTTYPE#)");
          stream.println("            throw new RuntimeException(\"Lists can not have children of type #LISTTYPE#\");");
          stream.println("        if(node instanceof #OPTTYPE#)");
          stream.println("            throw new RuntimeException(\"Lists can not have children of type #OPTTYPE#\");");
        }
        stream.println("          addChild(node);");
        stream.println("          return this;");
        stream.println("     }\n");
       
        stream.println("     public void #LISTTYPE#.insertChild(T node, int i) {");
        stream.println("          list_touched = true;");
        stream.println("          super.insertChild(node, i);");
        stream.println("     }");
        
        stream.println("     public void #LISTTYPE#.addChild(T node) {");
        stream.println("          list_touched = true;");
        stream.println("          super.addChild(node);");
        stream.println("     }");

        stream.println("     public void #LISTTYPE#.removeChild(int i) {");
        stream.println("          list_touched = true;");
        stream.println("          super.removeChild(i);");
        stream.println("     }");

        stream.println("     public int #LISTTYPE#.getNumChild() {");
        stream.println("          if(list_touched) {");
        stream.println("              for(int i = 0; i < getNumChildNoTransform(); i++)");
        stream.println("                  getChild(i);");
        stream.println("              list_touched = false;");
        stream.println("          }");
        stream.println("          return getNumChildNoTransform();");
        stream.println("     }");
        stream.println("     private boolean #LISTTYPE#.list_touched = true;");
        
        stream.flush();
        String result = stringWriter.toString().replaceAll("#LISTTYPE#",ASTNode.listName);
        result = result.replaceAll("#OPTTYPE#",ASTNode.listName);
        return result;
  }
	  
  public void ASTDecl.jjtGen(PrintWriter stream, String parserName, boolean rewriteEnabled) {
    String s;

    jjtGenConstructor(stream, parserName, rewriteEnabled);
    
    // Generate code common for all nodes by adding them to ASTNode
    if(name().equals("ASTNode")) {
      jjtGenASTNode(stream, parserName, rewriteEnabled);
      env().genRewriteOrderChecks(stream);
      env().genReset(stream);
      stream.println("    public java.util.Iterator<T> ASTNode.iterator() {");
      stream.println("        return new java.util.Iterator<T>() {");
      stream.println("            private int counter = 0;");
      stream.println("            public boolean hasNext() {");
      stream.println("                return counter < getNumChild();");
      stream.println("            }");
      stream.println("            @SuppressWarnings(\"unchecked\") public T next() {");
      stream.println("                if(hasNext())");
      stream.println("                    return (T)getChild(counter++);");
      stream.println("                else");
      stream.println("                    return null;");
      stream.println("            }");
      stream.println("            public void remove() {");
      stream.println("                throw new UnsupportedOperationException();");
      stream.println("            }");
      stream.println("        };");
      stream.println("    }");
    }
    else if(name().equals(ASTNode.listName)) {
    	stream.print(jjtGenListAPI());
    }
    else if(name().equals(ASTNode.optName)) {
      // do not override getNumChild with implementation below
    }
    else {
      stream.println("  protected int " +name() + ".numChildren() {");
      stream.println("    return " + numRegularChildren() + ";");
      stream.println("  }");
     
      if(debugMode && isRootNode()) {
        stream.println("    protected boolean " + name() + ".debugNodeAttachmentIsRoot() { return true; }");
      }
    }
    if(rewriteEnabled) {
      stream.println("    public boolean " + name() + ".mayHaveRewrite() {");
      if(name().equals("List"))
        stream.println("        return true;");
      else if(!hasRewrites())
        stream.println("        return false;");
      else if(!stagedRewrites || rewriteWithNoPhaseCondition())
        stream.println("        return true;");
      else {
        for(Iterator iter = rewritePhaseConditions().iterator(); iter.hasNext(); ) {
          String condition = (String)iter.next();
          stream.println("        if(" + condition + ") return true;");
        }
        stream.println("        return false;");
      }
      stream.println("    }");
    }
  }

  syn boolean ASTDecl.rewriteWithNoPhaseCondition() {
    for(int i = 0; i < getNumRewrite(); i++) {
      if(getRewrite(i).getCondition() == null)
       return true;
      String condition = getRewrite(i).getCondition().unparse();
      if(condition.indexOf("inRewritePhase") == -1 && condition.indexOf("inExactRewritePhase") == -1)
        return true;
    }
    return superClass() instanceof ASTDecl && ((ASTDecl)superClass()).rewriteWithNoPhaseCondition();
  }

  syn java.util.Set ASTDecl.rewritePhaseConditions() {
    java.util.Set set = new java.util.LinkedHashSet();
    Pattern p = Pattern.compile("inRewritePhase\\(\\w*\\)|inExactRewritePhase\\(\\w*\\)");
    for(int i = 0; i < getNumRewrite(); i++) {
      if(getRewrite(i).getCondition() != null) {
        String condition = getRewrite(i).getCondition().unparse();
        Matcher m = p.matcher(condition);
        while(m.find()) {
          String match = m.group();
          set.add(match);
        }
      }
    }
    if(superClass() instanceof ASTDecl)
      set.addAll(((ASTDecl)superClass()).rewritePhaseConditions());
    return set;
  }



  protected void Components.parse(String s) {
    jrag.AST.JragParser jp = new jrag.AST.JragParser(new java.io.StringReader(s));
    jp.root = hostClass().env();
    jp.setFileName(hostClass().getFileName());
    try {
      while(true)
        jp.AspectBodyDeclaration();
    } catch (Exception e) {
    }
  }
}
