
aspect ASTDeclContainmentGen {
	 
	
	// Constructor to build trees bottom up
	public String ASTDecl.buildingConstructor() {
	    // we only build constructors if there are components
	    if(!getComponents().hasNext())
	      return "";
	    StringBuffer s = new StringBuffer();
	    s.append("    // Declared in " + getFileName() + " line " + getStartLine() + "\n");
	    s.append("    public #ID#.#ID_IMPL#(");
	    int i = 0; // parameter index
	    for(Iterator iter = getComponents(); iter.hasNext(); ) {
	      Components c = (Components)iter.next();
	      if(!c.isNTA()) {
	        if(i != 0) s.append(", ");
	        s.append(computeImplName(c.constrParmType()) + " p" + i);
	        i++;
	      }
	    }
	    s.append(") {\n");
	    i = 0;
	    int j = 0;
	    for(Iterator iter = getComponents(); iter.hasNext(); ) {
	      Components c = (Components)iter.next();
	      if(!c.isNTA()) {
	        if(c instanceof TokenComponent) {
	          TokenComponent t = (TokenComponent)c;
	          s.append("        set" + t.getTokenId().getID() + "(p" + i + ");\n");
	        }
	        else {
	          s.append("        setChild(p" + String.valueOf(i) + ", " + j + ");\n");
	          j++;
	        }
	        i++;
	      }
	      else {
	        if(c instanceof ListComponents) {
	          s.append("        setChild(new " + ASTNode.listName + "(), " + j + ");\n");
	          j++;
	        }
	        else if(c instanceof OptionalComponent) {
	          s.append("        setChild(new " + ASTNode.optName + "(), " + j + ");\n");
	          j++;
	        }
	        else if(c instanceof AggregateComponents) {
	          s.append("        setChild(null, " + j + ");\n");
	          j++;
	        }
	      }
	    }
	    if(rewriteEnabled && isRootNode()) {
	      if(ASTNode.stagedRewrites)
	        s.append("        is$Final(java.lang.Integer.MAX_VALUE);\n");
	      else
	        s.append("        is$Final(true);\n");
	    }
	    s.append("    }\n\n");
	    //JastEMF beware: TypeDecl is different from printed code
	    return s.toString().replaceAll("#ID#", name()).replaceAll("#ID_IMPL#", implName());
	  }

	  public String ASTDecl.buildingSymbolConstructor() {
	    // we only build constructors if there are components ...
	    if(!getComponents().hasNext())
	      return "";
	    // ... and one of these components is a string token component
	    boolean stringArg = false;
	    for(Iterator iter = getComponents(); !stringArg && iter.hasNext(); ) {
	      Components c = (Components)iter.next();
	      if(!c.isNTA() && c instanceof TokenComponent && c.constrParmType().equals("String") || c.constrParmType().equals("java.lang.String"))
	        stringArg = true;
	    }
	    if(!stringArg) return "";

	    StringBuffer s = new StringBuffer();
	    s.append("    // Declared in " + getFileName() + " line " + getStartLine() + "\n");
	    s.append("    public #ID#.#ID_IMPL#(");
	    int i = 0; // parameter index
	    for(Iterator iter = getComponents(); iter.hasNext(); ) {
	      Components c = (Components)iter.next();
	      if(!c.isNTA()) {
	        if(i != 0) s.append(", ");
	        if(c instanceof TokenComponent && c.constrParmType().equals("String") || c.constrParmType().equals("java.lang.String"))
	          s.append("beaver.Symbol p" + i);
	        else
	          s.append(computeImplName(c.constrParmType()) + " p" + i);
	        i++;
	      }
	    }
	    s.append(") {\n");
	    i = 0;
	    int j = 0;
	    for(Iterator iter = getComponents(); iter.hasNext(); ) {
	      Components c = (Components)iter.next();
	      if(!c.isNTA()) {
	        if(c instanceof TokenComponent) {
	          TokenComponent t = (TokenComponent)c;
	          s.append("        set" + t.getTokenId().getID() + "(p" + i + ");\n");
	        }
	        else {
	          s.append("        setChild(p" + String.valueOf(i) + ", " + j + ");\n");
	          j++;
	        }
	        i++;
	      }
	      else {
	        if(c instanceof ListComponents) {
	          s.append("        setChild(new " + ASTNode.listName + "(), " + j + ");\n");
	          j++;
	        }
	        else if(c instanceof OptionalComponent) {
	          s.append("        setChild(new " + ASTNode.optName +"(), " + j + ");\n");
	          j++;
	        }
	        else if(c instanceof AggregateComponents) {
	          s.append("        setChild(null, " + j + ");\n");
	          j++;
	        }
	      }
	    }
	    if(rewriteEnabled && isRootNode()) {
	      if(ASTNode.stagedRewrites)
	        s.append("        is$Final(java.lang.Integer.MAX_VALUE);\n");
	      else
	        s.append("        is$Final(true);\n");
	    }
	    s.append("    }\n\n");
	    return s.toString().replaceAll("#ID#", name()).replaceAll("#ID_IMPL#", implName());
	  }
	  
	  public void ASTDecl.jjtGenFlushCache(PrintWriter stream) {
		    stream.print("    public void flushCache() {\n");
		    if(!name().equals("ASTNode"))
		      stream.print("        super.flushCache();\n");
		    for(int k = 0; k < getNumSynEq(); k++) {
		      AttrEq equ = getSynEq(k);
		      AttrDecl attr = equ.decl();
		      String u = attr.resetVisit() + attr.resetCache();
		      u = u.replaceAll("#NAME#", attr.attributeSignature());
		      stream.print(u);
		    }
		    for(int k = 0; k < getNumInhDecl(); k++) {
		      AttrDecl attr = getInhDecl(k);
		      String u = attr.resetVisit() + attr.resetCache();
		      u = u.replaceAll("#NAME#", attr.attributeSignature());
		      stream.print(u);
		    }
		    stream.print(flushCollectionCache());
		    stream.print("    }\n");

		    stream.print("    public void flushCollectionCache() {\n");
		    if(!name().equals("ASTNode"))
		      stream.print("        super.flushCollectionCache();\n");
		    stream.print(flushCollectionCache());
		    stream.print("    }\n");
	}
	  
	  public void ASTDecl.jjtGenCloneNode(PrintWriter stream, String parserName, boolean rewriteEnabled) {

		    // covariant return type when using Java 5
		    String name = implName();
		    if(ASTNode.isBuiltInType(name))
		      name = name + "<T>";
		    stream.print("    " + ASTNode.suppressWarnings() + " public " + name + " clone() throws CloneNotSupportedException {\n");
		    stream.print("        " + implName() + " node = (" + implName() + ")super.clone();\n");

		    for(int k = 0; k < getNumSynEq(); k++) {
		      AttrEq equ = getSynEq(k);
		      AttrDecl attr = equ.decl();
		      String u = attr.resetVisit() + attr.resetCache();
		      u = u.replaceAll("#NAME#", "node." + attr.attributeSignature());
		      stream.print(u);
		    }
		    for(int k = 0; k < getNumInhDecl(); k++) {
		      AttrDecl attr = getInhDecl(k);
		      String u = attr.resetVisit() + attr.resetCache();
		      u = u.replaceAll("#NAME#", "node." + attr.attributeSignature());
		      stream.print(u);
		    }

		    if(ASTNode.rewriteEnabled) {
		      stream.print("        node.in$Circle(false);\n");
		      if(ASTNode.stagedRewrites)
		        stream.print("        node.is$Final(0);\n");
		      else
		        stream.print("        node.is$Final(false);\n");
		    }

		
		    stream.print("        return node;\n");
		    stream.print("    }\n");
		    
		    if(!hasAbstract()) {
		      String copyBody;
	
		        copyBody =
		          "      try {\n" +
		          "          #CLASS# node = (#CLASS#)clone();\n" +
		          "          if(children != null) node.children = (ASTNode[])children.clone();\n" +
		          "          return node;\n" +
		          "      } catch (CloneNotSupportedException e) {\n" +
		          "      }\n" +
		          "      System.err.println(\"Error: Could not clone node of type \" + getClass().getName() + \"!\");\n" +
		          "      return null;\n";
	
		      String s = "    #ANNOTATIONS# public #RETURN# copy() {\n" + 
		          copyBody +
		          "    }\n" +
		          "    #ANNOTATIONS# public #RETURN# fullCopy() {\n" + 
		          "        #ID# res = (#ID#)copy();\n" +
		          "        for(int i = 0; i < getNumChildNoTransform(); i++) {\n" + 
		          "          ASTNode node = getChildNoTransform(i);\n" +
		          "          if(node != null) node = node.fullCopy();\n" +
		          "          res.setChild(node, i);\n" +
		          "        }\n" +
		          "        return res;\n    }\n";

		      String returnName = implName();
		      if(ASTNode.isBuiltInType(name()))
		        returnName = returnName + "<T>";
		      s = s.replaceAll("#RETURN#", returnName );
		      s = s.replaceAll("#ANNOTATIONS#", ASTNode.suppressWarnings());
		      s = s.replaceAll("#CLASS#", implName());
		      s = s.replaceAll("#ID#", implName());
		      stream.print(s);
		    }
		  }
	  public abstract void Components.jaddGen(PrintWriter stream, int index, boolean publicModifier, ASTDecl decl);

	  public void ListComponents.jaddGen(PrintWriter stream, int index, boolean publicModifier, ASTDecl decl) {
	    String s;
	    String name = decl.name();
	    // Generate getNum- and get-method for the list component
	    s = "    // Declared in " + hostClass().getFileName() + " line " + hostClass().getStartLine() + "\n" +
	        "    public void #HOST#.set#NAME#List(#LISTTYPE# list) {\n" + 
	        "        setChild(list, #INDEX#);\n" +
	        "    }\n\n" +
	        //"    private int #HOST#.getNum#NAME# = 0;\n" +
	        "    public int #HOST#.getNum#NAME#() {\n" + 
	        "        return get#NAME#List().getNumChild();\n" +
	        "    }\n\n" +
	        "    #ANNOTATIONS# public #TYPE# #HOST#.get#NAME#(int i) {\n" +
	        "        return (#TYPE#)get#NAME#List().getChild(i);\n" +
	        "    }\n\n" + 
	        "    public void #HOST#.add#NAME#(#TYPE# node) {\n" +
	        "        #LISTTYPE# list = (parent == null || state == null) ? get#NAME#ListNoTransform() : get#NAME#List();\n" +
	        "        list.addChild(node);\n" + 
	        "    }\n\n" + 
	        "    public void #HOST#.add#NAME#NoTransform(#TYPE# node) {\n" +
	        "        #LISTTYPE# list = get#NAME#ListNoTransform();\n" +
	        "        list.addChild(node);\n" + 
	        "    }\n\n" + 
	        "    public void #HOST#.set#NAME#(#TYPE# node, int i) {\n" + 
	        "        #LISTTYPE# list = get#NAME#List();\n" +
	        "        list.setChild(node, i);\n" +
	        "    }\n";
	        s = s +
	        "    public #LISTTYPE# #HOST#.get#NAME#s() {\n" + 
	        "        return get#NAME#List();\n" + 
	        "    }\n" +
	        "    public #LISTTYPE# #HOST#.get#NAME#sNoTransform() {\n" + 
	        "        return get#NAME#ListNoTransform();\n" + 
	        "    }\n\n";
	    if(!isNTA()) {
	      s = s +
	        "    #ANNOTATIONS# public #LISTTYPE# #HOST#.get#NAME#List() {\n" + 
	        "        #LISTTYPE# list = (#LISTTYPE#)getChild(#INDEX#);\n" +
	        "        list.getNumChild();\n" +
	        "        return list;\n" + 
	        "    }\n\n" + 
	        "    #ANNOTATIONS# public #LISTTYPE# #HOST#.get#NAME#ListNoTransform() {\n" + 
	        "        return (#LISTTYPE#)getChildNoTransform(#INDEX#);\n" + 
	        "    }\n\n";
	    }
	    else {
	      s = s +
	        "    public #LISTTYPE# #HOST#.get#NAME#ListNoTransform() {\n" + 
	        "        return (#LISTTYPE#)getChildNoTransform(#INDEX#);\n" + 
	        "    }\n\n" +
	        "    protected int #HOST#.get#NAME#ListChildPosition() {\n" +
	        "        return #INDEX#;\n" +
	        "    }\n\n";
	    }
	    
	    s = s.replaceAll("#LISTTYPE#", ASTNode.listName+ "<" + computeImplName(getId().type()) + ">");
	    s = s.replaceAll("#ANNOTATIONS#", ASTNode.suppressWarnings());
	    s = s.replaceAll("#TYPE#", computeImplName(getId().type()));
	    s = s.replaceAll("#NAME#", getId().name());
	    s = s.replaceAll("#INDEX#", String.valueOf(index));
	    s = s.replaceAll("#HOST#", name);
	    if(!publicModifier)
	      s = s.replaceAll("    public ", "    private ");
	    //stream.println(s);
	    parse(s);
	  }

	  public void OptionalComponent.jaddGen(PrintWriter stream, int index, boolean publicModifier, ASTDecl decl) {
	    String name = decl.name();
	    String s;
	    // Generate has- and get-method for the optional component
	    s = "    // Declared in " + hostClass().getFileName() + " line " + hostClass().getStartLine() + "\n" +
	        "    public void #HOST#.set#NAME#Opt(#OPTTYPE# opt) {\n" +
	        "        setChild(opt, #INDEX#);\n" + 
	        "    }\n\n" + 
	        "    public boolean #HOST#.has#NAME#() {\n" + 
	        "        return get#NAME#Opt().getNumChild() != 0;\n" +
	        "    }\n\n" +
	        "    #ANNOTATIONS# public #TYPE# #HOST#.get#NAME#() {\n" +
	        "        return (#TYPE#)get#NAME#Opt().getChild(0);\n" +
	        "    }\n\n" + 
	        "    public void #HOST#.set#NAME#(#TYPE# node) {\n" + 
	        "        get#NAME#Opt().setChild(node, 0);\n" +
	        "    }\n";
	    if(!isNTA()) {
	      s = s +
	        "    #ANNOTATIONS# public #OPTTYPE# #HOST#.get#NAME#Opt() {\n" +
	        "        return (#OPTTYPE#)getChild(#INDEX#);\n" +
	        "    }\n\n" +
	        "    #ANNOTATIONS# public #OPTTYPE# #HOST#.get#NAME#OptNoTransform() {\n" +
	        "        return (#OPTTYPE#)getChildNoTransform(#INDEX#);\n" +
	        "    }\n\n";
	    }
	    else {
	        s = s + "    #ANNOTATIONS# public #OPTTYPE# #HOST#.get#NAME#OptNoTransform() {\n" +
	        "        return (#OPTTYPE#)getChildNoTransform(#INDEX#);\n" +
	        "    }\n\n" +
	        "    protected int #HOST#.get#NAME#OptChildPosition() {\n" +
	        "        return #INDEX#;\n" +
	        "    }\n\n";
	    }
	    s = s.replaceAll("#OPTTYPE#", ASTNode.optName + "<" + computeImplName(getId().type()) + ">" );
	    s = s.replaceAll("#ANNOTATIONS#", ASTNode.suppressWarnings());
	    s = s.replaceAll("#TYPE#", computeImplName(getId().type()));
	    s = s.replaceAll("#NAME#", getId().name());
	    s = s.replaceAll("#INDEX#", String.valueOf(index));
	    s = s.replaceAll("#HOST#", name);
	    if(!publicModifier)
	      s = s.replaceAll("    public ", "    private ");
	    //stream.println(s);
	    parse(s);
	  }


	  private boolean TokenComponent.called = false;
	  public void TokenComponent.jaddGen(PrintWriter stream, int index, boolean publicModifier, ASTDecl decl) {
	    String name = decl.name();
	    StringBuffer buf = new StringBuffer();
	    buf.append("    // Declared in " + hostClass().getFileName() + " line " + hostClass().getStartLine() + "\n");
	    if(decl.redefinesTokenComponent(this)) {
	        buf.append("    protected #TYPE# #HOST#.#VARID#;\n");
	    }
	    // Generate attribute, get- and set-method for the token string
	    buf.append(
	        "    public void #HOST#.set#ID#(#TYPE# value) {\n" +
	        "        #VARID# = value;\n" +
	        "    }\n"
	    );
	    if(!isNTA()) {
	      boolean isStringToken = getTokenId().getTYPE().equals("String") || getTokenId().getTYPE().equals("java.lang.String");
	      if(isStringToken && ASTNode.beaver) {
	        if(decl.redefinesTokenComponent(this)) {
	          buf.append(
	          "    public int #HOST#.#VARID#start;\n" +
	          "    public int #HOST#.#VARID#end;\n"
	          );
	        }
	        buf.append(
	        "    public void #HOST#.set#ID#(beaver.Symbol symbol) {\n" +
	        "        if(symbol.value != null && !(symbol.value instanceof String))\n" +
	        "          throw new UnsupportedOperationException(\"set#ID# is only valid for String lexemes\");\n" +
	        "        #VARID# = (String)symbol.value;\n" +
	        "        #VARID#start = symbol.getStart();\n" +
	        "        #VARID#end = symbol.getEnd();\n" +
	        "    }\n"
	        );
	      }
	      if(isStringToken)
	        buf.append(
	        "    public #TYPE# #HOST#.get#ID#() {\n" +
	        "        return #VARID# != null ? #VARID# : \"\";\n" +
	        "    }\n\n");
	      else
	        buf.append(
	        "    public #TYPE# #HOST#.get#ID#() {\n" +
	        "        return #VARID#;\n" +
	        "    }\n\n");
	    }
	    String s = buf.toString();
	    s = s.replaceAll("#ID#", emf.GenSupport.computeAccName(getTokenId().getID()));
	    s = s.replaceAll("#VARID#", emf.GenSupport.computeVarName(getTokenId().getID()));
	    s = s.replaceAll("#TYPE#", getTokenId().getTYPE());
	    s = s.replaceAll("#TYPEINSIGNATURE#", ASTNode.convTypeNameToSignature(getTokenId().getTYPE()));
	    s = s.replaceAll("#HOST#", name);
	    if(!publicModifier)
	      s = s.replaceAll("    public ", "    private ");
	    //stream.println(s);
	    parse(s);

	  }

	  public void AggregateComponents.jaddGen(PrintWriter stream, int index, boolean publicModifier, ASTDecl decl) {
	    String name = decl.name();
	    String s;
	    // Generate get-method for component
	    s = "    // Declared in " + hostClass().getFileName() + " line " + hostClass().getStartLine() + "\n" +
	    	"    private #TYPE# #HOST#.#VARNAME# = null;\n" +
	        "    public void #HOST#.set#NAME#(#TYPE# node) {\n" + 
	        "        setChild(node, #INDEX#);\n" + 
	        "    }\n";
	    if(!isNTA()) {
	      s = s +
	        "    public #TYPE# #HOST#.get#NAME#() {\n" +
	        "        return (#TYPE#)getChild(#INDEX#);\n" + 
	        "    }\n\n" + 
	        "    public #TYPE# #HOST#.get#NAME#NoTransform() {\n" +
	        "        return (#TYPE#)getChildNoTransform(#INDEX#);\n" + 
	        "    }\n\n";
	    }
	    else {
	        s = s + "    public #TYPE# #HOST#.get#NAME#NoTransform() {\n" +
	        "        return (#TYPE#)getChildNoTransform(#INDEX#);\n" + 
	        "    }\n\n" +
	        "    protected int #HOST#.get#NAME#ChildPosition() {\n" +
	        "        return #INDEX#;\n" +
	        "    }\n\n";
	    }
	    s = s.replaceAll("#TYPE#", computeImplName(getId().type()));
	    s = s.replaceAll("#NAME#", emf.GenSupport.computeAccName((getId().name())));
	    s = s.replaceAll("#VARNAME#", emf.GenSupport.computeVarName((getId().name())));
	    s = s.replaceAll("#INDEX#", String.valueOf(index));
	    s = s.replaceAll("#HOST#", name);
	    if(!publicModifier)
	      s = s.replaceAll("    public ", "    private ");
	    //stream.println(s);
	    parse(s);
	  }

}
