/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. .\src-gen\ast\AST\Ast.jj */
/*@egen*/options {                                                                                  
  STATIC=false;                         	//added!
}

PARSER_BEGIN(Ast)

package ast.AST;

import java.util.*;

public class Ast/*@bgen(jjtree)*/implements AstTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTAstState jjtree = new JJTAstState();

/*@egen*/

  private LinkedList errorList = new LinkedList();
  public String fileName;
  
  public Iterator getErrors() {
    return errorList.iterator();
  }

  public Collection parseErrors() {
    return errorList;
  }
  
  private void error_skipto(int kind) {
    ParseException e = generateParseException();

    StringBuffer msg = new StringBuffer();
    
    msg.append(Integer.toString(e.currentToken.next.beginLine));
    msg.append(";");
    msg.append(Integer.toString(e.currentToken.next.beginColumn));
    msg.append(";");

    /*

    StringBuffer expected = new StringBuffer();
    int maxSize = 0;
    for(int i = 0; i < e.expectedTokenSequences.length; i++) {
      if(maxSize < e.expectedTokenSequences[i].length) {
        maxSize = e.expectedTokenSequences[i].length;
      }
      for(int j = 0; j < e.expectedTokenSequences[i].length; j++) {
        expected.append(e.tokenImage[e.expectedTokenSequences[i][j]] + " ");
      }
      if(e.expectedTokenSequences[i][e.expectedTokenSequences[i].length - 1] != 0) {
        expected.append("...");
      }
      expected.append(", ");
    }

    Token prev = e.currentToken;
    Token tok = e.currentToken.next;
    for(int i = 0; i < maxSize; i++) {
      prev = tok;
      if(tok.kind == 0) {
        break;
      }
      tok = tok.next;
    }

    msg.append(Integer.toString(prev.endLine));
    msg.append(";");
    msg.append(Integer.toString(prev.endColumn));
    msg.append(";");

    msg.append(expected.toString());
    */

    msg.append(Integer.toString(e.currentToken.next.endLine));
    msg.append(";");
    msg.append(Integer.toString(e.currentToken.next.endColumn));
    msg.append(";");
    msg.append("Syntax error");
    errorList.add(msg.toString());
    
    //System.err.println(e.toString());
    Token t;
    do {
      t = getNextToken();
    } while(t.kind != AstConstants.EOF && t.kind != kind);
  }

  /* ------ Added methods for NODE_SCOPE_HOOKS ---------*/
  public  void jjtreeOpenNodeScope(Node n) {
    ((SimpleNode) n).firstToken = getToken(1);
  }

  public void jjtreeCloseNodeScope(Node n) {
    ((SimpleNode) n).lastToken = getToken(0);
  }

}

PARSER_END(Ast)
/* WHITE SPACE */

SPECIAL_TOKEN :
{
  " "
| "\t"
| "\n"
| "\r"
| "\f"
}

/* COMMENTS */

MORE :
{
  "//" : IN_SINGLE_LINE_COMMENT
|
  <"/**" ~["/"]> { input_stream.backup(1); } : IN_FORMAL_COMMENT
|
  "/*" : IN_MULTI_LINE_COMMENT
}
<IN_SINGLE_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <SINGLE_LINE_COMMENT: "\n" | "\r" | "\r\n" > : DEFAULT
}

<IN_FORMAL_COMMENT>
SPECIAL_TOKEN :
{
  <FORMAL_COMMENT: "*/" > : DEFAULT
}

<IN_MULTI_LINE_COMMENT>
SPECIAL_TOKEN :
{
  <MULTI_LINE_COMMENT: "*/" > : DEFAULT
}

<IN_SINGLE_LINE_COMMENT,IN_FORMAL_COMMENT,IN_MULTI_LINE_COMMENT>
MORE :
{
  < ~[] >
}

/*
SKIP :
{
  " "
| "\t"
| "\n"
| "\r"
| <"//" (~["\n","\r"])* ("\n"|"\r"|"\r\n")>
}
*/

TOKEN : /* Reserved words */
{
  < ABSTRACT: "abstract" >
  | < SEMICOLON: ";" >
  | < BOOLEAN: "boolean" >
  | < CHAR: "char" >
  | < BYTE: "byte" >
  | < SHORT: "short" >
  | < INT: "int" >
  | < LONG: "long" >
  | < FLOAT: "float" >
  | < DOUBLE: "double" >
  | < SUPER: "super" >
  | < EXTENDS: "extends" >
}

TOKEN : /* Literals */
{ < ID: <LETTER> (<LETTER>|<DIGIT>)* >
| < #LETTER: ["_","a"-"z","A"-"Z"] >
| < #DIGIT: ["0"-"9"] >
}

Grammar Grammar()         : {/*@bgen(jjtree) Grammar */
  Grammar jjtn000 = new Grammar(JJTGRAMMAR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Grammar */
  try {
/*@egen*/
  ClassList()/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  { return jjtn000; }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void ClassList()      : {/*@bgen(jjtree) List */
  List jjtn000 = new List(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) List */
  try {
/*@egen*/
  (
  try {
    Class()
  } catch(ParseException e) {
  }
  )*/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
  //  (Class())*
}

void Class()          : {/*@bgen(jjtree) ASTDecl */
                          ASTDecl jjtn000 = new ASTDecl(JJTASTDECL);
                          boolean jjtc000 = true;
                          jjtree.openNodeScope(jjtn000);
                          jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token first = null, last; }
{/*@bgen(jjtree) ASTDecl */
  try {
/*@egen*/
  try {
  ((Abstract()/*@bgen(jjtree) #Opt( 1) */
               {
                 Opt jjtn001 = new Opt(JJTOPT);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
                 jjtreeOpenNodeScope(jjtn001);
               }
               try {
/*@egen*//*@bgen(jjtree)*/
               {
                 jjtree.closeNodeScope(jjtn001,  1);
                 jjtc001 = false;
                 jjtreeCloseNodeScope(jjtn001);
               }
/*@egen*/ { first = token; }/*@bgen(jjtree)*/
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001,  1);
                   jjtreeCloseNodeScope(jjtn001);
                 }
               }
/*@egen*/) | (/*@bgen(jjtree) #Opt( 0) */
                                              {
                                                Opt jjtn002 = new Opt(JJTOPT);
                                                boolean jjtc002 = true;
                                                jjtree.openNodeScope(jjtn002);
                                                jjtreeOpenNodeScope(jjtn002);
                                              }
                                              try {
/*@egen*//*@bgen(jjtree)*/
                                              {
                                                jjtree.closeNodeScope(jjtn002,  0);
                                                jjtc002 = false;
                                                jjtreeCloseNodeScope(jjtn002);
                                              }
/*@egen*/{}/*@bgen(jjtree)*/
                                              } finally {
                                                if (jjtc002) {
                                                  jjtree.closeNodeScope(jjtn002,  0);
                                                  jjtreeCloseNodeScope(jjtn002);
                                                }
                                              }
/*@egen*/))
//  [Abstract() { first = token; }] #Opt
  IdDecl() { if(first == null)  first = token; }
  OptSuperClass() ComponentsList() Attributes()
  <SEMICOLON>/*@bgen(jjtree)*/
              {
                jjtree.closeNodeScope(jjtn000, true);
                jjtc000 = false;
                jjtreeCloseNodeScope(jjtn000);
              }
/*@egen*/ {
    last = token;
    jjtn000.setFileName(fileName);
    jjtn000.setStartLine(first.beginLine);
    jjtn000.setEndLine(last.endLine);
    jjtn000.setComment(jjtn000.unparseComment());
  }
  } catch(ParseException e) {
    error_skipto(SEMICOLON);
    throw e;
//    jjtree.clearNodeScope(jjtThis);
//    jjtc000 = false;
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Attributes() : {}
{/*@bgen(jjtree) #List( 0) */
  {
    List jjtn001 = new List(JJTLIST);
    boolean jjtc001 = true;
    jjtree.openNodeScope(jjtn001);
    jjtreeOpenNodeScope(jjtn001);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn001,  0);
    jjtc001 = false;
    jjtreeCloseNodeScope(jjtn001);
  }
/*@egen*/
  {}/*@bgen(jjtree)*/
  } finally {
    if (jjtc001) {
      jjtree.closeNodeScope(jjtn001,  0);
      jjtreeCloseNodeScope(jjtn001);
    }
  }
/*@egen*//*@bgen(jjtree) #List( 0) */
  {
    List jjtn002 = new List(JJTLIST);
    boolean jjtc002 = true;
    jjtree.openNodeScope(jjtn002);
    jjtreeOpenNodeScope(jjtn002);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn002,  0);
    jjtc002 = false;
    jjtreeCloseNodeScope(jjtn002);
  }
/*@egen*/ // SynAttrDecl
  {}/*@bgen(jjtree)*/
  } finally {
    if (jjtc002) {
      jjtree.closeNodeScope(jjtn002,  0);
      jjtreeCloseNodeScope(jjtn002);
    }
  }
/*@egen*//*@bgen(jjtree) #List( 0) */
  {
    List jjtn003 = new List(JJTLIST);
    boolean jjtc003 = true;
    jjtree.openNodeScope(jjtn003);
    jjtreeOpenNodeScope(jjtn003);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn003,  0);
    jjtc003 = false;
    jjtreeCloseNodeScope(jjtn003);
  }
/*@egen*/ // SynEq
  {}/*@bgen(jjtree)*/
  } finally {
    if (jjtc003) {
      jjtree.closeNodeScope(jjtn003,  0);
      jjtreeCloseNodeScope(jjtn003);
    }
  }
/*@egen*//*@bgen(jjtree) #List( 0) */
  {
    List jjtn004 = new List(JJTLIST);
    boolean jjtc004 = true;
    jjtree.openNodeScope(jjtn004);
    jjtreeOpenNodeScope(jjtn004);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn004,  0);
    jjtc004 = false;
    jjtreeCloseNodeScope(jjtn004);
  }
/*@egen*/ // InhAttrDecl
  {}/*@bgen(jjtree)*/
  } finally {
    if (jjtc004) {
      jjtree.closeNodeScope(jjtn004,  0);
      jjtreeCloseNodeScope(jjtn004);
    }
  }
/*@egen*//*@bgen(jjtree) #List( 0) */
  {
    List jjtn005 = new List(JJTLIST);
    boolean jjtc005 = true;
    jjtree.openNodeScope(jjtn005);
    jjtreeOpenNodeScope(jjtn005);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn005,  0);
    jjtc005 = false;
    jjtreeCloseNodeScope(jjtn005);
  }
/*@egen*/ // InhEq
  {}/*@bgen(jjtree)*/
  } finally {
    if (jjtc005) {
      jjtree.closeNodeScope(jjtn005,  0);
      jjtreeCloseNodeScope(jjtn005);
    }
  }
/*@egen*//*@bgen(jjtree) #List( 0) */
  {
    List jjtn006 = new List(JJTLIST);
    boolean jjtc006 = true;
    jjtree.openNodeScope(jjtn006);
    jjtreeOpenNodeScope(jjtn006);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn006,  0);
    jjtc006 = false;
    jjtreeCloseNodeScope(jjtn006);
  }
/*@egen*/ // ClassBodyDecl
  {}/*@bgen(jjtree)*/
  } finally {
    if (jjtc006) {
      jjtree.closeNodeScope(jjtn006,  0);
      jjtreeCloseNodeScope(jjtn006);
    }
  }
/*@egen*//*@bgen(jjtree) #List( 0) */
  {
    List jjtn007 = new List(JJTLIST);
    boolean jjtc007 = true;
    jjtree.openNodeScope(jjtn007);
    jjtreeOpenNodeScope(jjtn007);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn007,  0);
    jjtc007 = false;
    jjtreeCloseNodeScope(jjtn007);
  }
/*@egen*/ // Rewrite
  {}/*@bgen(jjtree)*/
  } finally {
    if (jjtc007) {
      jjtree.closeNodeScope(jjtn007,  0);
      jjtreeCloseNodeScope(jjtn007);
    }
  }
/*@egen*//*@bgen(jjtree) #List( 0) */
  {
    List jjtn008 = new List(JJTLIST);
    boolean jjtc008 = true;
    jjtree.openNodeScope(jjtn008);
    jjtreeOpenNodeScope(jjtn008);
  }
  try {
/*@egen*//*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn008,  0);
    jjtc008 = false;
    jjtreeCloseNodeScope(jjtn008);
  }
/*@egen*/ // CollDecl
  {}/*@bgen(jjtree)*/
  } finally {
    if (jjtc008) {
      jjtree.closeNodeScope(jjtn008,  0);
      jjtreeCloseNodeScope(jjtn008);
    }
  }
/*@egen*/ // CollEq
}

void OptAbstract()     : {/*@bgen(jjtree) Opt */
  Opt jjtn000 = new Opt(JJTOPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Opt */
  try {
/*@egen*/ [Abstract()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Abstract()          : {/*@bgen(jjtree) Abstract */
  Abstract jjtn000 = new Abstract(JJTABSTRACT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Abstract */
  try {
/*@egen*/ "abstract"/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void OptSuperClass()     : {/*@bgen(jjtree) Opt */
  Opt jjtn000 = new Opt(JJTOPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Opt */
  try {
/*@egen*/ [":" IdUse()]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void ComponentsList()      : {/*@bgen(jjtree) List */
  List jjtn000 = new List(JJTLIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) List */
  try {
/*@egen*/ [ "::=" (Components())* ]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Components(): {}
{
  
  LOOKAHEAD(OptName() IdUse() "*")
  ListComponents()
| OptionalComponent()
| TokenComponent()
| AggregateComponents()
| LOOKAHEAD("/" OptName() IdUse() "*")
  ListComponentsNTA()
| LOOKAHEAD("/" "[")
  OptionalComponentNTA()
| LOOKAHEAD("/" "<")
  TokenComponentNTA()
| AggregateComponentsNTA()
}

void ListComponents()                : {/*@bgen(jjtree) ListComponents */
  ListComponents jjtn000 = new ListComponents(JJTLISTCOMPONENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ListComponents */
  try {
/*@egen*/ Id() "*"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void ListComponentsNTA()                   : {/*@bgen(jjtree) ListComponentsNTA */
  ListComponentsNTA jjtn000 = new ListComponentsNTA(JJTLISTCOMPONENTSNTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) ListComponentsNTA */
  try {
/*@egen*/ "/" Id() "*" "/"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void OptionalComponent()                   : {/*@bgen(jjtree) OptionalComponent */
  OptionalComponent jjtn000 = new OptionalComponent(JJTOPTIONALCOMPONENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OptionalComponent */
  try {
/*@egen*/ "[" Id() "]"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void OptionalComponentNTA()                      : {/*@bgen(jjtree) OptionalComponentNTA */
  OptionalComponentNTA jjtn000 = new OptionalComponentNTA(JJTOPTIONALCOMPONENTNTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) OptionalComponentNTA */
  try {
/*@egen*/ "/" "[" Id() "]" "/"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void TokenComponent()                :{/*@bgen(jjtree) TokenComponent */
  TokenComponent jjtn000 = new TokenComponent(JJTTOKENCOMPONENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TokenComponent */
  try {
/*@egen*/ "<" TokenId() ">"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void TokenComponentNTA()                   :{/*@bgen(jjtree) TokenComponentNTA */
  TokenComponentNTA jjtn000 = new TokenComponentNTA(JJTTOKENCOMPONENTNTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) TokenComponentNTA */
  try {
/*@egen*/ "/" "<" TokenId() ">" "/"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void AggregateComponents()                     :{/*@bgen(jjtree) AggregateComponents */
  AggregateComponents jjtn000 = new AggregateComponents(JJTAGGREGATECOMPONENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AggregateComponents */
  try {
/*@egen*/ Id()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void AggregateComponentsNTA()                        :{/*@bgen(jjtree) AggregateComponentsNTA */
  AggregateComponentsNTA jjtn000 = new AggregateComponentsNTA(JJTAGGREGATECOMPONENTSNTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) AggregateComponentsNTA */
  try {
/*@egen*/ "/" Id() "/"/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void Id()    : {/*@bgen(jjtree) Id */
  Id jjtn000 = new Id(JJTID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Id */
  try {
/*@egen*/ OptName() IdUse()/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void OptName()     : {/*@bgen(jjtree) Opt */
  Opt jjtn000 = new Opt(JJTOPT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/}
{/*@bgen(jjtree) Opt */
  try {
/*@egen*/ [LOOKAHEAD(NameNode() ":") NameNode() ":"]/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void NameNode()          :
{/*@bgen(jjtree) NameNode */
  NameNode jjtn000 = new NameNode(JJTNAMENODE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token t;
}
{/*@bgen(jjtree) NameNode */
  try {
/*@egen*/ t = <ID>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.setID(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void IdUse()         :
{/*@bgen(jjtree) #IdUse(true) */
  IdUse jjtn000 = new IdUse(JJTIDUSE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token t;
}
{/*@bgen(jjtree) #IdUse(true) */
  try {
/*@egen*/ t = <ID>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  {
    jjtn000.setID(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}

void IdDecl()          :
{/*@bgen(jjtree) #IdDecl(true) */
  IdDecl jjtn000 = new IdDecl(JJTIDDECL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token t;
}
{/*@bgen(jjtree) #IdDecl(true) */
  try {
/*@egen*/ t = <ID>/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
  { jjtn000.setID(t.image);
  }/*@bgen(jjtree)*/
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}


void TokenId()           :
{/*@bgen(jjtree) #TokenId(true) */
  TokenId jjtn000 = new TokenId(JJTTOKENID);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtreeOpenNodeScope(jjtn000);
/*@egen*/ Token t;
  String type = null;
  boolean hasType = false;
}
{/*@bgen(jjtree) #TokenId(true) */
  try {
/*@egen*/ t = <ID> [ ":" type = Type() { hasType = true; } ]/*@bgen(jjtree)*/
  {
    jjtree.closeNodeScope(jjtn000, true);
    jjtc000 = false;
    jjtreeCloseNodeScope(jjtn000);
  }
/*@egen*/
// Default type is String for backward compability
  { jjtn000.setID(t.image);
    jjtn000.setTYPE(hasType ? type : "String");
  }/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtreeCloseNodeScope(jjtn000);
    }
  }
/*@egen*/
}
/*Changed to return string */
String Type():
{ String s; }
{
 (
   LOOKAHEAD(2) s = ReferenceType()
 |
   s = PrimitiveType()
 )
 { return s; }
}

String ReferenceType():
{ String s; }
{
  (
   s = PrimitiveType() ( LOOKAHEAD(2) "[" "]" { s += "[]"; } )+
  |
   ( s = ClassOrInterfaceType() ) ( LOOKAHEAD(2) "[" "]" { s += "[]"; } )*
  )
  { return s; }
}

String ClassOrInterfaceType():
{ Token t; String s; String u; }
{
  t = <ID> { s = t.image; } [ LOOKAHEAD(2) u = TypeArguments() { s += u; } ]
  ( LOOKAHEAD(2) "." t = <ID> { s += "." + t.image; } [ LOOKAHEAD(2) u = TypeArguments() { s += u; } ] )*
  { return s; }
}

String TypeArguments():
{ String s; String t; }
{
   "<" { s = "<"; } t = TypeArgument() { s += t; } ( "," { s += ","; } t = TypeArgument() { s += t; } )* ">" { s+=">"; }
   { return s; }
}

String TypeArgument():
{ String s; String t; }
{
 (
   s = ReferenceType()
 |
   "?" { s = "?"; } [ t = WildcardBounds() { s += t; } ]
 )
 { return s; }
}

String WildcardBounds():
{ String s; String t; }
{
 (
   "extends" t = ReferenceType() { s = " extends " + t; }
 |
   "super" t = ReferenceType() { s = " super " + t; }
 )
 { return s; }
}

String PrimitiveType():
{ Token t; }
{
(
  t = "boolean"
|
  t = "char"
|
  t = "byte"
|
  t = "short"
|
  t = "int"
|
  t = "long"
|
  t = "float"
|
  t = "double"
)
{ return t.image; }
}

/*
String Type() :
{
  String t;
  StringBuffer b = new StringBuffer();
}
{
  (( t = PrimitiveType() | t = Name() ) { b.append(t); }  ( "[" "]" { b.append("[]");} )*)
{return b.toString();}

}

String PrimitiveType() :
{Token t;}
{
  (t = "boolean"
|
  t = "char"
|
  t = "byte"
|
  t = "short"
|
  t = "int"
|
  t = "long"
|
  t = "float"
|
  t = "double")
{return t.image; }
}
*/

/* Changed to return token */
String  Name() :
/*
 * A lookahead of 2 is required below since "Name" can be followed
 * by a ".*" when used in the context of an "ImportDeclaration".
 */
{Token t; StringBuffer s = new StringBuffer();}
{
  t = <ID> { s.append(t.image); }
  ( LOOKAHEAD(2) "." t = <ID> { s.append("." + t.image); }
  )*
{ return s.toString();}
}

