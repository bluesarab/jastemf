/* Generated By:JJTree: Do not edit this line. .\src-gen\jrag\AST\JragParserTreeConstants.java */

package jrag.AST;

public interface JragParserTreeConstants
{
  public int JJTCOMPILATIONUNIT = 0;
  public int JJTPACKAGEDECLARATION = 1;
  public int JJTIMPORTDECLARATION = 2;
  public int JJTMODIFIERS = 3;
  public int JJTFIELDMODIFIERS = 4;
  public int JJTTYPEDECLARATION = 5;
  public int JJTASPECTDECLARATION = 6;
  public int JJTASPECTBODY = 7;
  public int JJTASPECTBODYDECLARATION = 8;
  public int JJTASPECTCLASSDECLARATION = 9;
  public int JJTASPECTCLASSBODY = 10;
  public int JJTASPECTINTERFACEDECLARATION = 11;
  public int JJTASPECTINTERFACEMEMBERDECLARATION = 12;
  public int JJTASPECTSONSDECLARATION = 13;
  public int JJTASPECTINTERFACESYNATTRIBUTEDECLARATION = 14;
  public int JJTASPECTINTERFACEINHATTRIBUTEDECLARATION = 15;
  public int JJTASPECTINTERFACEMETHODDECLARATIONLOOKAHEAD = 16;
  public int JJTASPECTINTERFACEMETHODDECLARATION = 17;
  public int JJTASPECTINTERFACEFIELDDECLARATION = 18;
  public int JJTASPECTNESTEDINTERFACEDECLARATION = 19;
  public int JJTASPECTNESTEDCLASSDECLARATION = 20;
  public int JJTASPECTMETHODDECLARATIONLOOKAHEAD = 21;
  public int JJTASPECTMETHODDECLARATION = 22;
  public int JJTASPECTREFINEMETHODDECLARATIONLOOKAHEAD = 23;
  public int JJTASPECTREFINEMETHODDECLARATION = 24;
  public int JJTASPECTCONSTRUCTORDECLARATION = 25;
  public int JJTASPECTREFINECONSTRUCTORDECLARATION = 26;
  public int JJTASPECTFIELDDECLARATION = 27;
  public int JJTASPECTSYNATTRIBUTEDECLARATION = 28;
  public int JJTASPECTINHATTRIBUTEDECLARATION = 29;
  public int JJTASPECTREWRITE = 30;
  public int JJTASPECTSYNEQUATION = 31;
  public int JJTASPECTREFINESYNEQUATION = 32;
  public int JJTASPECTINHEQUATION = 33;
  public int JJTASPECTREFINEINHEQUATION = 34;
  public int JJTCOLLECTIONATTRIBUTE = 35;
  public int JJTCOLLECTIONCONTRIBUTION = 36;
  public int JJTASPECTADDINTERFACE = 37;
  public int JJTASPECTEXTENDINTERFACE = 38;
  public int JJTCLASSDECLARATION = 39;
  public int JJTTYPENAMELIST = 40;
  public int JJTUNMODIFIEDCLASSDECLARATION = 41;
  public int JJTENUMDECLARATION = 42;
  public int JJTENUMBODY = 43;
  public int JJTENUMCONSTANT = 44;
  public int JJTTYPEPARAMETERS = 45;
  public int JJTTYPEPARAMETER = 46;
  public int JJTTYPEBOUND = 47;
  public int JJTCLASSBODY = 48;
  public int JJTCLASSBODYDECLARATION = 49;
  public int JJTINTERFACEDECLARATION = 50;
  public int JJTUNMODIFIEDINTERFACEDECLARATION = 51;
  public int JJTINTERFACEMEMBERDECLARATION = 52;
  public int JJTFIELDDECLARATION = 53;
  public int JJTVARIABLEDECLARATOR = 54;
  public int JJTVARIABLEDECLARATORID = 55;
  public int JJTVARIABLEINITIALIZER = 56;
  public int JJTARRAYINITIALIZER = 57;
  public int JJTMETHODDECLARATION = 58;
  public int JJTMETHODDECLARATOR = 59;
  public int JJTFORMALPARAMETERS = 60;
  public int JJTFORMALPARAMETER = 61;
  public int JJTCONSTRUCTORDECLARATION = 62;
  public int JJTEXPLICITCONSTRUCTORINVOCATION = 63;
  public int JJTINITIALIZER = 64;
  public int JJTTYPE = 65;
  public int JJTREFERENCETYPE = 66;
  public int JJTCLASSORINTERFACETYPE = 67;
  public int JJTTYPEARGUMENTS = 68;
  public int JJTTYPEARGUMENT = 69;
  public int JJTWILDCARDBOUNDS = 70;
  public int JJTPRIMITIVETYPE = 71;
  public int JJTRESULTTYPE = 72;
  public int JJTNAME = 73;
  public int JJTNAMELIST = 74;
  public int JJTEXPRESSION = 75;
  public int JJTASSIGNMENTOPERATOR = 76;
  public int JJTCONDITIONALEXPRESSION = 77;
  public int JJTCONDITIONALOREXPRESSION = 78;
  public int JJTCONDITIONALANDEXPRESSION = 79;
  public int JJTINCLUSIVEOREXPRESSION = 80;
  public int JJTEXCLUSIVEOREXPRESSION = 81;
  public int JJTANDEXPRESSION = 82;
  public int JJTEQUALITYEXPRESSION = 83;
  public int JJTINSTANCEOFEXPRESSION = 84;
  public int JJTRELATIONALEXPRESSION = 85;
  public int JJTSHIFTEXPRESSION = 86;
  public int JJTADDITIVEEXPRESSION = 87;
  public int JJTMULTIPLICATIVEEXPRESSION = 88;
  public int JJTUNARYEXPRESSION = 89;
  public int JJTPREINCREMENTEXPRESSION = 90;
  public int JJTPREDECREMENTEXPRESSION = 91;
  public int JJTUNARYEXPRESSIONNOTPLUSMINUS = 92;
  public int JJTCASTLOOKAHEAD = 93;
  public int JJTPOSTFIXEXPRESSION = 94;
  public int JJTCASTEXPRESSION = 95;
  public int JJTPRIMARYEXPRESSION = 96;
  public int JJTMEMBERSELECTOR = 97;
  public int JJTPRIMARYPREFIX = 98;
  public int JJTPRIMARYSUFFIX = 99;
  public int JJTLITERAL = 100;
  public int JJTBOOLEANLITERAL = 101;
  public int JJTNULLLITERAL = 102;
  public int JJTARGUMENTS = 103;
  public int JJTARGUMENTLIST = 104;
  public int JJTALLOCATIONEXPRESSION = 105;
  public int JJTARRAYDIMSANDINITS = 106;
  public int JJTSTATEMENT = 107;
  public int JJTASSERTSTATEMENT = 108;
  public int JJTLABELEDSTATEMENT = 109;
  public int JJTBLOCK = 110;
  public int JJTBLOCKSTATEMENT = 111;
  public int JJTLOCALVARIABLEDECLARATION = 112;
  public int JJTEMPTYSTATEMENT = 113;
  public int JJTSTATEMENTEXPRESSION = 114;
  public int JJTSWITCHSTATEMENT = 115;
  public int JJTSWITCHLABEL = 116;
  public int JJTIFSTATEMENT = 117;
  public int JJTWHILESTATEMENT = 118;
  public int JJTDOSTATEMENT = 119;
  public int JJTFORSTATEMENT = 120;
  public int JJTFORINIT = 121;
  public int JJTSTATEMENTEXPRESSIONLIST = 122;
  public int JJTFORUPDATE = 123;
  public int JJTBREAKSTATEMENT = 124;
  public int JJTCONTINUESTATEMENT = 125;
  public int JJTRETURNSTATEMENT = 126;
  public int JJTTHROWSTATEMENT = 127;
  public int JJTSYNCHRONIZEDSTATEMENT = 128;
  public int JJTTRYSTATEMENT = 129;
  public int JJTRUNSIGNEDSHIFT = 130;
  public int JJTRSIGNEDSHIFT = 131;
  public int JJTANNOTATION = 132;
  public int JJTNORMALANNOTATION = 133;
  public int JJTMARKERANNOTATION = 134;
  public int JJTSINGLEMEMBERANNOTATION = 135;
  public int JJTMEMBERVALUEPAIRS = 136;
  public int JJTMEMBERVALUEPAIR = 137;
  public int JJTMEMBERVALUE = 138;
  public int JJTMEMBERVALUEARRAYINITIALIZER = 139;
  public int JJTANNOTATIONTYPEDECLARATION = 140;
  public int JJTANNOTATIONTYPEBODY = 141;
  public int JJTANNOTATIONTYPEMEMBERDECLARATION = 142;
  public int JJTDEFAULTVALUE = 143;
  public int JJTCACHEDECLARATIONS = 144;


  public String[] jjtNodeName = {
    "CompilationUnit",
    "PackageDeclaration",
    "ImportDeclaration",
    "Modifiers",
    "FieldModifiers",
    "TypeDeclaration",
    "AspectDeclaration",
    "AspectBody",
    "AspectBodyDeclaration",
    "AspectClassDeclaration",
    "AspectClassBody",
    "AspectInterfaceDeclaration",
    "AspectInterfaceMemberDeclaration",
    "AspectSonsDeclaration",
    "AspectInterfaceSynAttributeDeclaration",
    "AspectInterfaceInhAttributeDeclaration",
    "AspectInterfaceMethodDeclarationLookahead",
    "AspectInterfaceMethodDeclaration",
    "AspectInterfaceFieldDeclaration",
    "AspectNestedInterfaceDeclaration",
    "AspectNestedClassDeclaration",
    "AspectMethodDeclarationLookahead",
    "AspectMethodDeclaration",
    "AspectRefineMethodDeclarationLookahead",
    "AspectRefineMethodDeclaration",
    "AspectConstructorDeclaration",
    "AspectRefineConstructorDeclaration",
    "AspectFieldDeclaration",
    "AspectSynAttributeDeclaration",
    "AspectInhAttributeDeclaration",
    "AspectRewrite",
    "AspectSynEquation",
    "AspectRefineSynEquation",
    "AspectInhEquation",
    "AspectRefineInhEquation",
    "CollectionAttribute",
    "CollectionContribution",
    "AspectAddInterface",
    "AspectExtendInterface",
    "ClassDeclaration",
    "TypeNameList",
    "UnmodifiedClassDeclaration",
    "EnumDeclaration",
    "EnumBody",
    "EnumConstant",
    "TypeParameters",
    "TypeParameter",
    "TypeBound",
    "ClassBody",
    "ClassBodyDeclaration",
    "InterfaceDeclaration",
    "UnmodifiedInterfaceDeclaration",
    "InterfaceMemberDeclaration",
    "FieldDeclaration",
    "VariableDeclarator",
    "VariableDeclaratorId",
    "VariableInitializer",
    "ArrayInitializer",
    "MethodDeclaration",
    "MethodDeclarator",
    "FormalParameters",
    "FormalParameter",
    "ConstructorDeclaration",
    "ExplicitConstructorInvocation",
    "Initializer",
    "Type",
    "ReferenceType",
    "ClassOrInterfaceType",
    "TypeArguments",
    "TypeArgument",
    "WildcardBounds",
    "PrimitiveType",
    "ResultType",
    "Name",
    "NameList",
    "Expression",
    "AssignmentOperator",
    "ConditionalExpression",
    "ConditionalOrExpression",
    "ConditionalAndExpression",
    "InclusiveOrExpression",
    "ExclusiveOrExpression",
    "AndExpression",
    "EqualityExpression",
    "InstanceOfExpression",
    "RelationalExpression",
    "ShiftExpression",
    "AdditiveExpression",
    "MultiplicativeExpression",
    "UnaryExpression",
    "PreIncrementExpression",
    "PreDecrementExpression",
    "UnaryExpressionNotPlusMinus",
    "CastLookahead",
    "PostfixExpression",
    "CastExpression",
    "PrimaryExpression",
    "MemberSelector",
    "PrimaryPrefix",
    "PrimarySuffix",
    "Literal",
    "BooleanLiteral",
    "NullLiteral",
    "Arguments",
    "ArgumentList",
    "AllocationExpression",
    "ArrayDimsAndInits",
    "Statement",
    "AssertStatement",
    "LabeledStatement",
    "Block",
    "BlockStatement",
    "LocalVariableDeclaration",
    "EmptyStatement",
    "StatementExpression",
    "SwitchStatement",
    "SwitchLabel",
    "IfStatement",
    "WhileStatement",
    "DoStatement",
    "ForStatement",
    "ForInit",
    "StatementExpressionList",
    "ForUpdate",
    "BreakStatement",
    "ContinueStatement",
    "ReturnStatement",
    "ThrowStatement",
    "SynchronizedStatement",
    "TryStatement",
    "RUNSIGNEDSHIFT",
    "RSIGNEDSHIFT",
    "Annotation",
    "NormalAnnotation",
    "MarkerAnnotation",
    "SingleMemberAnnotation",
    "MemberValuePairs",
    "MemberValuePair",
    "MemberValue",
    "MemberValueArrayInitializer",
    "AnnotationTypeDeclaration",
    "AnnotationTypeBody",
    "AnnotationTypeMemberDeclaration",
    "DefaultValue",
    "CacheDeclarations",
  };
}
