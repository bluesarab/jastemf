aspect Stuff{

	public ASTNode ASTNode.copy() {
		try {
			return (ASTNode) clone();
		} catch (CloneNotSupportedException e) {
		}
		System.err.println("Error: Could not clone node of type "
				+ getClass().getName() + "!");
		return null;
	}
	
	public ASTList ASTList.copy() {
		try {
			return (ASTList) clone();
		} catch (CloneNotSupportedException e) {}
		System.err.println("Error: Could not clone node of type "
				+ getClass().getName() + "!");
		return null;
	}
	
    public ASTOpt.ASTOpt(T opt) {
         setChild(opt, 0);
    }
	
	public ASTOpt ASTOpt.copy() {
		try {
			return (ASTOpt) clone();
		} catch (CloneNotSupportedException e) {
		}
		System.err.println("Error: Could not clone node of type "
				+ getClass().getName() + "!");
		return null;
	}
	
	public ASTNode ASTNode.getParent() {
		if (eContainer == null)
			return null;
		final ASTNode parent;
		EStructuralFeature feature = this.eContainingFeature();
		if (feature.isMany() || feature.getLowerBound() == 0) {
			parent = ((ASTNode) eContainer).resolveAccess(
					eContainer.eClass().getEAllContainments().indexOf(feature))
					.getChild();
		} else {
			parent = (ASTNode) eContainer;
		}
		if (parent.is$Final() != is$Final())
			state().boundariesCrossed++;
		return parent;
	}
	
	public ASTNode ASTList.parent;

	public ASTNode ASTList.getParent() {
		if (parent != null && parent.is$Final() != is$Final())
			state().boundariesCrossed++;
		return parent;
	}
	
	public ASTNode ASTOpt.parent;

	public ASTNode ASTOpt.getParent() {
		if (parent != null && parent.is$Final() != is$Final())
			state().boundariesCrossed++;
		return parent;
	}
	
}