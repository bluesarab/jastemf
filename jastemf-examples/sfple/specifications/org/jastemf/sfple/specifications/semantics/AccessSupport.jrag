/**
 * This program and the accompanying materials are made available under the
 * terms of the MIT license (X11 license) which accompanies this distribution.
 */

/**
 * @author C. BÃ¼rger
 */
aspect AccessSupport {
	eq ASTNode.DeepCopy() {
		ASTNode copy = this.copy();
		for (int i = 0; i < getNumChild(); i++)
			copy.setChild(getChild(i).DeepCopy(), i);
		return copy;
	}
	
	eq ASTNode.ASTRoot() = getParent().ASTRoot();
	eq CompilationUnit.ASTRoot() = this;
	
	syn DeweyAddress CompilationUnit.NodeAddress() =
		new DeweyAddress().addAddressPart(1);
	eq ASTNode.getChild(int index).NodeAddress() =
		NodeAddress().clone().addAddressPart(index + 1);
	
	eq Definition.IsFunction() = AsFunction() != null;
	eq Definition.AsFunction() = hasRValue() ?
			getRValue().AsFunction() :
			null;
	eq Computation.Parameters() {
		java.util.List<Definition> result =
			new LinkedList<Definition>();
		for (int i = 0; i < getNumDefinition(); i++)
			if (getDefinition(i).IsFunctionParameter())
				result.add(getDefinition(i));
		return result;
	}
	eq Definition.IsFunctionParameter() = !hasRValue();
	
	eq Computation.getDefinition(int i).Context() = this;
	
	eq Definition.getRValue().Defines() = this;
	eq CompilationUnit.getExpression().Defines() = null;
	syn Definition CompilationUnit.Defines() = null;
	
	eq Vector.Length() = getNumExpression();
	
	eq BooleanValue.Print() = getValue().toString();
	eq IntegerValue.Print() = getValue().toString();
	eq RealValue.Print() = getValue().toString();
	eq Vector.Print() {
		StringBuilder result = new StringBuilder();
		result.append('{');
		for (Expression e:getExpressionList()) {
			result.append(e.AsConstant().Print());
			result.append(',');
		}
		if (getNumExpression() > 0)
			result.deleteCharAt(result.length() - 1);
		result.append('}');
		return result.toString();
	}
	eq ErrorValue.Print() = "ERROR";
}
