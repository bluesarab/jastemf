/**
 * This program and the accompanying materials are made available under the
 * terms of the MIT license (X11 license) which accompanies this distribution.
 */

/**
 * @author C. BÃ¼rger
 */

CompilationUnit ::=
		Expression;

abstract Expression;
	
	/**
	 * Functions are ordinary computations, whereas each parameter is
	 * a definition without a rvalue. A function application associates
	 * with each parameter an argument, such that the parameter is
	 * bounded and has a value.
	 */
	Computation:Expression ::=
			Definition*
			Expression;
	
	/**
	 * Constraints Reference:
	 * 	References must be defined, i.e., unambiguously associated with
	 * 		a definition in their lexicalic scope (static binding).
	 */
	Reference:Expression ::=
			<Name:String>;
	
	/**
	 * Constraints VectorAccess:
	 *	type(Vector) = Vector
	 */
	abstract VectorAccess:Expression ::=
			Vector:Expression;
		
		/**
		 * Constraints VectorElementAccess:
		 *	type(Index) = Integer and Index >= 1 and Index <= length(Vector)
		 */
		VectorElementAccess:VectorAccess ::=
			Index:Expression;
		
		/**
		 * Constraints VectorRangeAccess:
		 *	type(Lb) = Integer and Lb >= 1
		 *	iff exists Ub and type(Ub) = Integer: Lb <= Ub
		 *	iff not exists Ub: Lb <= length(Vector)
		 * 	iff exists Ub:
	     * 		type(Ub) = Integer and Ub >= 1 and Ub <= length(Vector)
		 */
		VectorRangeAccess:VectorAccess ::=
				Lb:Expression
				[Ub:Expression]; // If left: Ub = "*" = length(Vector)
		
		/**
		 * Constraints VectorTailAccess:
		 *	length(Vector) > 0
		 */
		VectorTailAccess:VectorAccess;
		
		VectorLengthAccess:VectorAccess;
	
	/**
	 * Constraints FunctionCall:
	 * 	The called function must be defined, i.e., be unambiguous
	 * 		in the caller's lexical scope (static binding).
	 * 	iff the called function f is defined:
	 * 		|parameters(f)| = |Argument|
	 */
	FunctionCall:Expression ::=
			<Name:String>
			Arguments:Vector;
	
	/**
	 * Constraints If:
	 * 	type(Condition) = Boolean
	 */
	If:Expression ::=
			Condition:Expression
			Then:Expression
			Else:Expression;
	
	abstract Constant:Expression;
		
		BooleanValue:Constant ::=
				<Value:Boolean>;
		
		IntegerValue:Constant ::=
				<Value:Integer>;
		
		RealValue:Constant ::=
				<Value:Float>;
		
		Vector:Constant ::=
				Expression*;
		
		ErrorValue:Constant;
	
	abstract UnaryExpression:Expression ::=
			Operand:Expression;
		
		/**
		 * Constraints Not:
		 * 	type(Operand) = Boolean
		 */
		Not:UnaryExpression;
		
		/**
		 * Constraints UMinus:
		 * 	type(Operand) = Integer or Float
		 */
		UMinus:UnaryExpression;
	
	abstract BinaryExpression:Expression ::=
			Operand1:Expression
			<Op:Op>
			Operand2:Expression;
		
		/**
		 * Constraints BooleanOp:
		 * 	type(Operand1 and Operand2) = Boolean
		 */
		BooleanOp:BinaryExpression;
		
		/**
		 * Constraints RelationalOp:
		 * type(Operand1 and Operand2) = Integer or Float or Vector
		 *	iff type(Operand1 or Operand2) = Integer or Float:
		 *		type(Operand1 and Operand2) = Integer or Float
		 * 	iff type(Operand1 or Operand2) = Vector:
		 *		type(Operand1 and Operand2) = Vector
		 *		length(Operand1) = length(Operand2)
		 */
		RelationalOp:BinaryExpression;
		
		/**
		 * Constraints EqualityExpression:
		 * 	iff type(Operand1 or Operand2) = Boolean:
		 * 		type(Operand1) = type(Operator2)
		 * 	iff type(Operand1 or Operand2) = Integer or Float:
		 * 		type(Operand1 and Operator2) = Integer or Float
		 * 	iff type(Operand1 or Operand2) = Vector
		 * 		type(Operand1 and Operand2) = Vector
		 *		iff length(Operand1) = length(Operand2):
		 *			for all e1 of Operand1: for all e2 of Operand2:
		 *				e1 = e2 # Error
		 */
		EqualityOp:BinaryExpression;
		
		/**
		 * Constraints ArithmeticOp:
		 * 	type(Operand1 and Operand2) = Integer or Float or Vector
		 * 	iff type(Operand1) = Integer or Float:
		 * 		iff type(Operand2) = Vector:
		 * 			ArithmeticOp = Multiplication
		 * 	iff type(Operand1) = Vector:
		 * 		type(Operand2) = Vector
		 * 		length(Operand1) = length(Operand2)
		 */
		ArithmeticOp:BinaryExpression;

/**
 * Constraints VarDef:
 * 	Definitions must be acyclic, i.e., the values of references within a
 * 		definition's rvalue must not depend on the definition's lvalue.
 */
Definition ::=
		<LValue:String>
		[RValue:Expression];
