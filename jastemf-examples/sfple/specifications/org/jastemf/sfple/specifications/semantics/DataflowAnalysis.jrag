/**
 * This program and the accompanying materials are made available under the
 * terms of the MIT license (X11 license) which accompanies this distribution.
 */

/**
 * @author C. BÃ¼rger
 */
aspect DataflowAnalysis {
	/**
	 * TODO JastAdd bug to fix:
	 * IMPORTANT: The naive evaluation algorithm must be selected,
	 * 	since the default 2Ph-LC does not work correctly in the
	 * 	presence of the calculator's rewrites!
	 * IMPORTANT: JastAdd collection attributes in combination with
	 * 	rewrites are currently also beside the above described
	 * 	problem broken.
	 * /
	coll @Naive Set<Definition> Definition.DirectDependencies()
		circular [new HashSet<Definition>()] with add;
	Reference contributes Definition()
		when Defines() != null && Definition() != null to
		Definition.DirectDependencies() for Defines();
	FunctionCall contributes Definition()
		when Defines() != null && Definition() != null to
		Definition.DirectDependencies() for Defines();
	ErrorValue contributes Defines() when Defines() != null
		to Definition.DirectDependencies() for Defines();
	
	eq Definition.DependsOn(Definition def) {
		for (Definition dep:DirectDependencies())
			if (dep == def || dep.DependsOn(def))
				return true;
		return false;
	}
	
	eq Definition.IsCyclic() {
		// Even recursive functions are permitted...
		if (hasRValue() && !getRValue().IsFunction())
			// ...recursive variables are not, as well as...
			if (DependsOn(this))
				return true;
		// ...functions or variables depending on cyclic entities:
		for (Definition dep:DirectDependencies())
			if (dep.IsCyclic())
				return true;
		return false;
	}
	//*/
	
	eq Definition.IsCyclic() = hasRValue() ?
			// Even recursive functions are permitted...
			(!getRValue().IsFunction() ?
					// ...recursive variables are not, as well as...
					DependsOn(this) || getRValue().IsCyclic() :
					// ...functions depending on cyclic entities:
					getRValue().IsCyclic()) :
			false;
	syn boolean Expression.IsCyclic();
	eq Computation.IsCyclic() = getExpression().IsCyclic();
	eq VectorElementAccess.IsCyclic() =
		getVector().IsCyclic() ||
		getIndex().IsCyclic();
	eq VectorRangeAccess.IsCyclic() =
		getVector().IsCyclic() ||
		getLb().IsCyclic() ||
		(hasUb() ? getUb().IsCyclic() : false);
	eq VectorAccess.IsCyclic() =
		getVector().IsCyclic();
	eq Reference.IsCyclic() = Definition() != null ?
			Definition().IsCyclic() :
			false;
	eq FunctionCall.IsCyclic() =
		getArguments().IsCyclic() ||
		(Definition() != null ?
				Definition().IsCyclic() :
				false);
	eq If.IsCyclic() =
		getCondition().IsCyclic() ||
		getThen().IsCyclic() ||
		getElse().IsCyclic();
	eq Constant.IsCyclic() = false;
	eq Vector.IsCyclic() {
		for (Expression e:getExpressionList())
			if (e.IsCyclic())
				return true;
		return false;
	}
	eq ErrorValue.IsCyclic() = true;
	eq UnaryExpression.IsCyclic() =
		getOperand().IsCyclic();
	eq BinaryExpression.IsCyclic() =
		getOperand1().IsCyclic() ||
		getOperand2().IsCyclic();
	
	eq Definition.DependsOn(Definition def) = hasRValue() ?
			getRValue().DependsOn(def) :
			false;
	syn boolean Expression.DependsOn(Definition def);
	eq Computation.DependsOn(Definition def) =
		getExpression().DependsOn(def);
	eq Reference.DependsOn(Definition def) = Definition() != null ?
			(Definition() == def ? true : Definition().DependsOn(def)) :
			false;
	eq VectorElementAccess.DependsOn(Definition def) =
		getVector().DependsOn(def) ||
		getIndex().DependsOn(def);
	eq VectorRangeAccess.DependsOn(Definition def) =
		getVector().DependsOn(def) ||
		getLb().DependsOn(def) ||
		(hasUb() ? getUb().DependsOn(def) : false);
	eq VectorAccess.DependsOn(Definition def) =
		getVector().DependsOn(def);
	eq FunctionCall.DependsOn(Definition def) =
		getArguments().DependsOn(def) ||
		(Definition() != null ?
				(Definition() == def ? true : Definition().DependsOn(def)) :
				false);
	eq If.DependsOn(Definition def) =
		getCondition().DependsOn(def) ||
		getThen().DependsOn(def) ||
		getElse().DependsOn(def);
	eq Constant.DependsOn(Definition def) = false;
	eq Vector.DependsOn(Definition def) {
		for (Expression e:getExpressionList())
			if (e.DependsOn(def))
				return true;
		return false;
	}
	eq UnaryExpression.DependsOn(Definition def) =
		getOperand().DependsOn(def);
	eq BinaryExpression.DependsOn(Definition def) =
		getOperand1().DependsOn(def) ||
		getOperand2().DependsOn(def);
}
