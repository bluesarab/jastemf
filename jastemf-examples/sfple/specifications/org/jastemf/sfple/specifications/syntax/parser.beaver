/**
 * This program and the accompanying materials are made available under the
 * terms of the MIT license (X11 license) which accompanies this distribution.
 */

/**
 * @author C. BÃ¼rger
 */

%package "org.jastemf.sfple.syntax";
%import "org.jastemf.sfple.semantics.*","org.jastemf.sfple.semantics.ast.*";

%embed {:
	/**
	 * Dummy event class performing no further actions in case of errors
	 * (Beaver's default implementation reports errors on System.err).
	 */
	public static class MyEvents extends Events {
		public void scannerError(Scanner.Exception e) {}
		public void syntaxError(Symbol token) {}
		public void unexpectedTokenRemoved(Symbol token) {}
		public void missingTokenInserted(Symbol token) {}
		public void misspelledTokenReplaced(Symbol token) {}
		public void errorPhraseRemoved(Symbol error) {}	
	}
	
	/**
	 * Deactivate Beaver's default error recovery.
	 */
	protected void recoverFromError(Symbol token, TokenStream in) throws java.io.IOException, Parser.Exception {
		// HACK: Parser.Exception constructor is not visible => error by super class method:
		super.recoverFromError(new Symbol(Terminals.EOF, "end-of-file"), in); // throws Parser.Exception
	}
:};

%init {:
	// Deactivate default error message printing on System.err
	report = new MyEvents();
:};

%class "Parser";

%terminals kLET, kIN, kIF, kTHEN, kELSE, kFI;
%terminals kNOT, kAND, kOR;
// [,],(,),{,}
%terminals pBRACKETOPENSQUARE, pBRACKETCLOSESQUARE, pBRACKETOPENROUND, pBRACKETCLOSEROUND, pBRACKETOPENCURLY, pBRACKETCLOSECURLY;
// <, >, <=, >=
%terminals pANGLEBRACKETLEFT, pANGLEBRACKETRIGHT, pANGLEBRACKETLEFT_EQUALS, pANGLEBRACKETRIGHT_EQUALS;
// +,-,*,/
%terminals pPLUS, pMINUS, pSTAR, pSLASH;
// =, #
%terminals pEQUALS, pSHARP;
// ..,,,:=
%terminals pPOINT_POINT, pCOMMA, pCOLON_EQUALS;
%terminals BOOLEAN, INTEGER, REAL, IDENTIFIER, FUN;

%goal CompilationUnit;
%goal Expression;
%goal Definition;

%typeof BOOLEAN 	= "Boolean";
%typeof INTEGER 	= "Integer";
%typeof REAL 		= "Float";
%typeof IDENTIFIER 	= "String";
%typeof FUN 		= "String";

%typeof CompilationUnit = "CompilationUnit";
%typeof Definition 		= "Definition";
%typeof Expression 		= "Expression";
%typeof OrExpr 			= "Expression";
%typeof AndExpr 		= "Expression";
%typeof EqExpr 			= "Expression";
%typeof RelExpr			= "Expression";
%typeof AddExpr 		= "Expression";
%typeof MulExpr 		= "Expression";
%typeof UnaryExpr 		= "Expression";
%typeof PrimExpr 		= "Expression";
%typeof VectorAccess 	= "Expression";

%typeof DefinitionList	= "List<Definition>";
%typeof ParameterList	= "List<Definition>";
%typeof ExpressionList	= "List<Expression>";

CompilationUnit = Expression.expr {: return new Symbol(new CompilationUnit(expr)); :};

Expression = kLET DefinitionList.defs kIN Expression.expr
	{:
		return new Symbol(new Computation(defs, expr));
	:}
	| kIF Expression.cond kTHEN Expression.e1 kELSE Expression.e2 kFI
	{:
		return new Symbol(new If(cond, e1, e2));
	:}
	| OrExpr;

OrExpr = OrExpr.expr1 kOR AndExpr.expr2
	{:
		return new Symbol(new BooleanOp(expr1, Op.OR, expr2));
	:}
	| AndExpr
	;

AndExpr = AndExpr.expr1 kAND EqExpr.expr2
	{:
		return new Symbol(new BooleanOp(expr1, Op.AND, expr2));
	:}
	| EqExpr
	;

EqExpr = EqExpr.expr1 pEQUALS RelExpr.expr2
	{:
		return new Symbol(new EqualityOp(expr1, Op.EQUAL, expr2));
	:}
	| EqExpr.expr1 pSHARP RelExpr.expr2
	{:
		return new Symbol(new EqualityOp(expr1, Op.NEQUAL, expr2));
	:}
	| RelExpr
	;

RelExpr = RelExpr.expr1 pANGLEBRACKETLEFT AddExpr.expr2
	{:
		return new Symbol(new RelationalOp(expr1, Op.LESSER, expr2));
	:}
	| RelExpr.expr1 pANGLEBRACKETRIGHT AddExpr.expr2
	{:
		return new Symbol(new RelationalOp(expr1, Op.GREATER, expr2));
	:}
	| RelExpr.expr1 pANGLEBRACKETLEFT_EQUALS AddExpr.expr2
	{:
		return new Symbol(new RelationalOp(expr1, Op.LESSERTHANEQUAL, expr2));
	:}
	| RelExpr.expr1 pANGLEBRACKETRIGHT_EQUALS AddExpr.expr2
	{:
		return new Symbol(new RelationalOp(expr1, Op.GREATERTHANEQUAL, expr2));
	:}
	| AddExpr
	;

AddExpr = AddExpr.expr1 pPLUS MulExpr.expr2
	{:
		return new Symbol(new ArithmeticOp(expr1, Op.ADD, expr2));
	:}
	| AddExpr.expr1 pMINUS MulExpr.expr2
	{:
		return new Symbol(new ArithmeticOp(expr1, Op.SUB, expr2));
	:}
	| MulExpr
	;

MulExpr = MulExpr.expr1 pSTAR UnaryExpr.expr2
	{:
		return new Symbol(new ArithmeticOp(expr1, Op.MUL, expr2));
	:}
	| MulExpr.expr1 pSLASH UnaryExpr.expr2
	{:
		return new Symbol(new ArithmeticOp(expr1, Op.DIV, expr2));
	:}
	| UnaryExpr
	;

UnaryExpr = pMINUS PrimExpr.expr
	{:
		return new Symbol(new UMinus(expr));
	:}
	| kNOT PrimExpr.expr
	{:
		return new Symbol(new Not(expr));
	:}
	| PrimExpr
	;

PrimExpr = BOOLEAN.value
	{:
		return new Symbol(new BooleanValue(value.booleanValue()));
	:}
	| INTEGER.value
	{:
		return new Symbol(new IntegerValue(value.intValue()));
	:}
	| REAL.value
	{:
		return new Symbol(new RealValue(value.floatValue()));
	:}
	| IDENTIFIER.name
	{:
		return new Symbol(new Reference(name));
	:}
	| VectorAccess
	| pBRACKETOPENCURLY pBRACKETCLOSECURLY
	{:
		return new Symbol(new Vector(new List()));
	:}
	| pBRACKETOPENCURLY ExpressionList.list pBRACKETCLOSECURLY
	{:
		return new Symbol(new Vector(list));
	:}
	| FUN.name pBRACKETOPENROUND ExpressionList.list pBRACKETCLOSEROUND
	{:
		return new Symbol(new FunctionCall(name, new Vector(list)));
	:}
	| pBRACKETOPENROUND Expression.expr pBRACKETCLOSEROUND
	{:
		return _symbol_expr;
	:}
	;

VectorAccess = PrimExpr.vector pBRACKETOPENSQUARE Expression.lb pPOINT_POINT Expression.ub pBRACKETCLOSESQUARE
	{:
		return new Symbol(new VectorRangeAccess(vector, lb, new Opt(ub)));
	:}
	| PrimExpr.vector pBRACKETOPENSQUARE Expression.lb pPOINT_POINT pSTAR pBRACKETCLOSESQUARE
	{:
		return new Symbol(new VectorRangeAccess(vector, lb, new Opt()));
	:}
	| PrimExpr.vector pBRACKETOPENSQUARE Expression.expr pBRACKETCLOSESQUARE
	{:
		return new Symbol(new VectorElementAccess(vector, expr));
	:}
	| PrimExpr.vector pBRACKETOPENSQUARE FUN.id pBRACKETCLOSESQUARE
	{:
		if (id.equals("tail"))
			return new Symbol(new VectorTailAccess(vector));
		else if (id.equals("length"))
			return new Symbol(new VectorLengthAccess(vector));
		else return new Symbol(new ErrorValue());
	:}
	;

Definition = IDENTIFIER.name pCOLON_EQUALS Expression.expr
	{:
		return new Symbol(new Definition(name, new Opt(expr)));
	:}
	| FUN.name pBRACKETOPENROUND ParameterList.list pBRACKETCLOSEROUND pCOLON_EQUALS Expression.expr
	{:
		return new Symbol(new Definition(name, new Opt(new Computation(list, expr))));
	:}
	;

ExpressionList = ExpressionList.list pCOMMA Expression.expr
	{:
		list.add(expr);
		return _symbol_list;
	:}
	| Expression.expr
	{:
		return new Symbol(new List<Expression>().add(expr));
	:}
	;

ParameterList = ParameterList.list pCOMMA IDENTIFIER.name
	{:
		list.add(new Definition(name, new Opt()));
		return _symbol_list;
	:}
	| IDENTIFIER.name
	{:
		return new Symbol(new List().add(new Definition(name, new Opt())));
	:}
	;

DefinitionList = DefinitionList.list Definition.def
	{:
		list.add(def);
		return _symbol_list;
	:}
	|
	{:
		return new Symbol(new List<Definition>());
	:}
	;
