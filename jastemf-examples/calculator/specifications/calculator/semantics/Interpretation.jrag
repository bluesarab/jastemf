/**
 * <copyright>
 *
 * This program and the accompanying materials are made available under the
 * terms of the BSD 3-clause license which accompanies this distribution.
 *
 * </copyright>
 */

/**
 * @author C. BÃ¼rger
 */
aspect Interpretation {
	eq Constant.Value(State vm) {
		if (Type() == Type.Boolean)
			return AsBoolean();
		if (Type() == Type.Integer)
			return AsInteger();
		return AsReal();
	}
	eq Reference.Value(State vm) = vm.lookUpValue(Declaration()) != null ?
			vm.lookUpValue(Declaration()) :
			new ErrorValue();
	eq ProcedureCall.Value(State vm) {
		// TODO
		return new ErrorValue();
	}
	eq NestedExpression.Value(State vm) = getExpression().Value(vm);
	eq Not.Value(State vm) = Type() == Type.Boolean ?
			!(Boolean)getOperand().Value(vm) :
			new ErrorValue();
	eq UMinus.Value(State vm) {
		if (Type() == Type.Real)
			return -(Float)getOperand().Value(vm);
		if (Type() == Type.Integer)
			return -(Integer)getOperand().Value(vm);
		return new ErrorValue();
	}
	eq And.Value(State vm) = Type() == Type.Boolean ?
			(Boolean)getOperand1().Value(vm) && (Boolean)getOperand2().Value(vm) :
			new ErrorValue();
	eq Or.Value(State vm) = Type() == Type.Boolean ?
			(Boolean)getOperand1().Value(vm) || (Boolean)getOperand2().Value(vm) :
			new ErrorValue();
	eq Equal.Value(State vm) {
		if (Type() != Type.Boolean)
			return new ErrorValue();
		if (getOperand1().Type() == Type.Boolean)
			return (Boolean)getOperand1().Value(vm) == (Boolean)getOperand2().Value(vm);
		return ((Number)getOperand1().Value(vm)).floatValue() == ((Number)getOperand2().Value(vm)).floatValue();
	}
	eq Addition.Value(State vm) {
		if (Type() == Type.Integer)
			return (Integer)getOperand1().Value(vm) + (Integer)getOperand2().Value(vm);
		if (Type() == Type.Real)
			return ((Number)getOperand1().Value(vm)).floatValue() + ((Number)getOperand2().Value(vm)).floatValue();
		return new ErrorValue();
	}
	eq Subtraction.Value(State vm) {
		if (Type() == Type.Integer)
			return (Integer)getOperand1().Value(vm) - (Integer)getOperand2().Value(vm);
		if (Type() == Type.Real)
			return ((Number)getOperand1().Value(vm)).floatValue() - ((Number)getOperand2().Value(vm)).floatValue();
		return new ErrorValue();
	}
	eq Multiplication.Value(State vm) {
		if (Type() == Type.Integer)
			return (Integer)getOperand1().Value(vm) * (Integer)getOperand2().Value(vm);
		if (Type() == Type.Real)
			return ((Number)getOperand1().Value(vm)).floatValue() * ((Number)getOperand2().Value(vm)).floatValue();
		return new ErrorValue();
	}
	eq Division.Value(State vm) {
		if (Type() == Type.Integer && (Integer)getOperand2().Value(vm) != 0)
			return (Integer)getOperand1().Value(vm) / (Integer)getOperand2().Value(vm);
		if (Type() == Type.Real && ((Number)getOperand2().Value(vm)).floatValue() != 0)
			return ((Number)getOperand1().Value(vm)).floatValue() / ((Number)getOperand2().Value(vm)).floatValue();
		return new ErrorValue();
	}
}
