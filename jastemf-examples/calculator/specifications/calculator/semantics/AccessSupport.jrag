/**
 * <copyright>
 *
 * This program and the accompanying materials are made available under the
 * terms of the BSD 3-clause license which accompanies this distribution.
 *
 * </copyright>
 */

/**
 * @author C. BÃ¼rger
 */
aspect AccessSupport {
	eq ASTNode.ASTRoot() = getParent().ASTRoot();
	eq CompilationUnit.ASTRoot() = this;
	
	syn DeweyAddress CompilationUnit.NodeAddress() =
		new DeweyAddress().addAddressPart(1);
	eq ASTNode.getChild(int index).NodeAddress() =
		NodeAddress().clone().addAddressPart(index + 1);
	
	eq Constant.AsBoolean() {
		try {
		return Boolean.parseBoolean(getLexem());
		} catch (Exception e) {return null;}
	}
	eq Constant.AsInteger() {
		try {
		return Integer.parseInt(getLexem());
		} catch (Exception e) {return null;}
	}
	eq Constant.AsReal() {
		try {
		return Float.parseFloat(getLexem());
		} catch (Exception e) {return null;}
	}
}
