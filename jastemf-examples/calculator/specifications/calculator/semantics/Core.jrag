/**
 * <copyright>
 *
 * This program and the accompanying materials are made available under the
 * terms of the BSD 3-clause license which accompanies this distribution.
 *
 * </copyright>
 */
import java.util.*;

import calculator.semantics.*;

/**
 * @author C. Bürger
 */
aspect AccessSupport {
	ASTNode implements Comparable<ASTNode>;
	public int ASTNode.compareTo(ASTNode o) {
		return o.NodeAddress().compareTo(NodeAddress());
	}
	
	syn CompilationUnit ASTNode.ASTRoot();
	inh DeweyAddress ASTNode.NodeAddress();
	
	inh ProcedureDeclaration Statement.ProcedureInContext();
	
	coll java.util.List<ProcedureReturn> ProcedureDeclaration.Returns()
		[new ArrayList<ProcedureReturn>()] with add;
	
	syn Boolean Constant.AsBoolean();
	syn Integer Constant.AsInteger();
	syn Float Constant.AsReal();
}

/**
 * @author C. Bürger
 */
aspect NameAnalysis {
	inh Collection<ProcedureDeclaration> ASTNode.LookUpPDecl(String name);
	syn ProcedureDeclaration ProcedureCall.Declaration();
	syn ProcedureDeclaration CompilationUnit.MainProcedure();
	
	inh Collection<VariableDeclaration> ASTNode.LookUpVDecl(String name);
	syn VariableDeclaration Reference.Declaration();
	syn VariableDeclaration VariableAssignment.Declaration();
}

/**
 * @author C. Bürger
 */
aspect TypeAnalysis {
	syn Type VariableDeclaration.Type();
	syn Type VariableAssignment.Type();
	syn Type ProcedureReturn.Type();
	
	syn Type Expression.Type();
}

/**
 * @author C. Bürger
 */
aspect DataflowAnalysis {
	// inh Statement Statement.LastAssignment(VariableDeclaration decl);
	// syn Statment Reference.LastAssignment();
	
	syn boolean Statement.MaybeUndecidable();
}

/**
 * @author C. Bürger
 */
aspect Interpretation {
	syn Object Expression.ConstantValue();
	syn Object Expression.Value(State vm);
	
	syn State CompilationUnit.Interpret();
	public abstract void Statement.Interpret(State vm)
		throws InterpretationException;
}
