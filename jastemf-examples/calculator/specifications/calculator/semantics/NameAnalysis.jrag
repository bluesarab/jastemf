/**
 * <copyright>
 *
 * This program and the accompanying materials are made available under the
 * terms of the BSD 3-clause license which accompanies this distribution.
 *
 * </copyright>
 */

/**
 * @author C. BÃ¼rger
 */
aspect NameAnalysis {
	/** Procedure declaration name analysis */
	
	syn Collection<ProcedureDeclaration> CompilationUnit.LookUpPDecl(String name) =
		new LinkedList<ProcedureDeclaration>();
	eq CompilationUnit.getBlock().LookUpPDecl(String name) =
		new LinkedList<ProcedureDeclaration>();
	eq Block.getStatement(int index).LookUpPDecl(String name) {
		Collection<ProcedureDeclaration> result =
			new LinkedList<ProcedureDeclaration>();
		for (int i = 0; i < getNumStatement(); i++) // Declared within block
			result.addAll(getStatement(i).LookUpPLocal(name));
		return !result.isEmpty() ? result : LookUpPDecl(name);
	}
	syn Collection<ProcedureDeclaration> Statement.LookUpPLocal(String name) =
		new LinkedList<ProcedureDeclaration>();
	eq ProcedureDeclaration.LookUpPLocal(String name) {
		if (!getName().equals(name))
			return new LinkedList<ProcedureDeclaration>();
		Collection<ProcedureDeclaration> result =
			new LinkedList<ProcedureDeclaration>();
		result.add(this);
		return result;
	}
	
	eq ProcedureCall.Declaration() = LookUpPDecl(getName()).size() == 1 ?
			LookUpPDecl(getName()).iterator().next() :
			null;
	
	/** Variable declaration name analysis */
	
	syn Collection<VariableDeclaration> CompilationUnit.LookUpVDecl(String name) =
		new LinkedList<VariableDeclaration>();
	eq CompilationUnit.getBlock().LookUpVDecl(String name) =
		new LinkedList<VariableDeclaration>();
	eq Block.getStatement(int index).LookUpVDecl(String name) {
		Collection<VariableDeclaration> result =
			new LinkedList<VariableDeclaration>();
		for (int i = 0; i < index; i++) // Declare before use
			result.addAll(getStatement(i).LookUpVLocal(name));
		return !result.isEmpty() ? result : LookUpVDecl(name);
	}
	syn Collection<VariableDeclaration> Statement.LookUpVLocal(String name) =
		new LinkedList<VariableDeclaration>();
	eq VariableDeclaration.LookUpVLocal(String name) {
		if (!getName().equals(name))
			return new LinkedList<VariableDeclaration>();
		Collection<VariableDeclaration> result =
			new LinkedList<VariableDeclaration>();
		result.add(this);
		return result;
	}
	
	eq Reference.Declaration() = LookUpVDecl(getName()).size() == 1 ?
			LookUpVDecl(getName()).iterator().next() :
			null;

	eq VariableAssignment.Declaration() =
		LookUpVDecl(getLValue()).size() == 1 ?
			LookUpVDecl(getLValue()).iterator().next() :
			null;
	
	/** Assignment name analysis */
	
	/*
	VariableAssignment contributes this when Declaration() != null
		to VariableDeclaration.Assignments() for Declaration();
	
	eq Reference.LastAssignment() {
		java.util.List<VariableAssignment> assigns =
			new LinkedList<VariableAssignment>();
		for (VariableAssignment assign:Declaration().Assignments())
			if (assign.NodeAddress().compareTo(NodeAddress()) > 0 &&
					!assign.NodeAddress().isAncestor(NodeAddress()))
				assigns.add(assign);
		Collections.sort(
				assigns,
				new Comparator<VariableAssignment>() {
					public int compare(VariableAssignment o1, VariableAssignment o2) {
						return o1.NodeAddress().compareTo(o2.NodeAddress());
					}
				});
		return !assigns.isEmpty() ? assigns.get(0) : null;
	}
	*/
}
