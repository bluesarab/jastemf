/**
 * <copyright>
 *
 * This program and the accompanying materials are made available under the
 * terms of the BSD 3-clause license which accompanies this distribution.
 *
 * </copyright>
 */

/**
 * @author C. BÃ¼rger
 */
aspect ConstraintChecking {
	eq ASTNode.IsCorrect() {
		if (!IsCorrectLocal())
			return false;
		for (int i = 0; i < getNumChild(); i++)
			if (!getChild(i).IsCorrect())
				return false;
		return true;
	}
	eq ASTNode.IsCorrectLocal() = true;
	// WORKAROUND: Superfluous equations required for EMF adaptation:
	eq CompilationUnit.IsCorrect() = super.IsCorrect();
	eq Statement.IsCorrect() = super.IsCorrect();
	eq Statement.IsCorrectLocal() = super.IsCorrectLocal();
	
	eq Expression.IsCorrectLocal() = Type() != Type.ERROR_TYPE;
	eq CompilationUnit.IsCorrectLocal() = MainProcedure() != null;
	eq ProcedureDeclaration.IsCorrectLocal() {
		// Procedures with a return type must finish with a return statement:
		if (getReturnType() != Type.Undefined) {
			if (getBody().getNumStatement() == 0)
				return false;
			Statement lastStatement = getBody().getStatement(
					getBody().getNumStatement() - 1);
			if (!(lastStatement instanceof ProcedureReturn))
				return false;
		}
		// The procedure declaration must not be a redeclaration:
		return LookUpPDecl(getName()).size() < 2;
	}
	eq VariableDeclaration.IsCorrectLocal() =
		LookUpVDecl(getName()).size() < 2; // Forbid redeclarations
	eq If.IsCorrectLocal() = getCondition().Type() == Type.Boolean;
	eq While.IsCorrectLocal() = getCondition().Type() == Type.Boolean;
	eq VariableAssignment.IsCorrectLocal() = Type() != Type.ERROR_TYPE;
	eq ProcedureReturn.IsCorrectLocal() = Type() != Type.ERROR_TYPE;
	eq Write.IsCorrectLocal() = getExpression().Type() != Type.ERROR_TYPE;
	eq Read.IsCorrectLocal() = Declaration() != null;
}
