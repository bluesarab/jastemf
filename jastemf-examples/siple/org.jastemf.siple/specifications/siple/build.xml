<!--
	This program and the accompanying materials are made available under the
	terms of the BSD 3-clause license which accompanies this distribution.
-->

<!--
	Ant script to generate a SIPLE implementation, i.e. a compiler and
	interpreter for SIPLE programs. There exist three different
	implementations:
	 1) A version implemented based on JFlex, Beaver and JastAdd.
	 2) A version with an EMF repository implemented based on JFlex, Beaver,
	 	JastAdd and JastEMF.
	 3) A version based on version 2 and EMFText (including AntLR) with an
	 	Eclipse editor with syntax highlighting, code completion and semantic
	 	properties view.
	@author C. BÃ¼rger
-->
<project name="Generation" default="EMF Version">
	<path id="_basedir">
		<pathelement location="./../.."/>
	</path>
	<property name="_basedir" refid="_basedir"/>
	
	<target name="Clean" description="Delete all generated artefacts.">
		<delete includeemptydirs="true">
			<fileset dir="${_basedir}">
				<!-- all these artefacts are generated -->
				<include name="src-gen/**/*"/>
				<include name="icons/**/*"/>
				<include name="icons"/>
			</fileset>
		</delete>
	</target>
	
	<target
		name="JastAdd Version"
		description="Generate the standard compiler (version 1).">
		<echo message="========================================================================"/>
		<echo message="||                                                                    ||"/>
		<echo message="||                      Generate Implementation                       ||"/>
		<echo message="||                         (JastAdd Version)                          ||"/>
		<echo message="||                                                                    ||"/>
		<echo message="========================================================================"/>
		<antcall target="JFlex Lexer"/>
		<antcall target="Beaver Parser"/>
		<antcall target="JastAdd Semantic"/>
		<antcall target="RTT JastAdd Integration"/>
	</target>
	
	<target
		name="EMF Version"
		description="Generate the EMF adapted compiler (version 2).">
		<echo message="========================================================================"/>
		<echo message="||                                                                    ||"/>
		<echo message="||                      Generate Implementation                       ||"/>
		<echo message="||                           (EMF Version)                            ||"/>
		<echo message="||                                                                    ||"/>
		<echo message="========================================================================"/>
		<!-- Clean before building to avoid errors due to refactoring -->
		<antcall target="Clean"/>
		<antcall target="JFlex Lexer"/>
		<antcall target="Beaver Parser"/>
		<antcall target="EMF Semantic"/>
		<antcall target="RTT EMF Integration"/>
	</target>

	<target
		name="EMFText Resources"
		description="Generate an editor for the EMF adapted compiler using EMFText (version 3).">
		<echo message="========================================================================"/>
		<echo message="||                                                                    ||"/>
		<echo message="||                         Generate Extension                         ||"/>
		<echo message="||                  (EMFText Editor for EMF Version)                  ||"/>
		<echo message="||                                                                    ||"/>
		<echo message="========================================================================"/>
		<emftext.GenerateTextResource
			syntax="syntax/siple.cs"
			rootFolder="${_basedir}/.."
			syntaxProjectName="org.jastemf.siple.semantics.resource.siple"
		/>
		<eclipse.refreshLocal depth="infinite" resource="/"/>
	</target>
	
	<target
		name="JFlex Lexer"
		description="Generate the lexer used by SIPLE versions 1 and 2.">
		<echo message="========================> Generate JFlex Lexer &lt;========================"/>
		<taskdef
			classname	= "JFlex.anttask.JFlexTask"
			name		= "jflex"
			classpath	= "${_basedir}/sources/libraries/JFlex.jar"
		/>
		<jflex
			file		= "symbols/lexer.jflex"
			destdir		= "${_basedir}/src-gen"
			nobak		= "on"
			verbose		= "off"
		/>
	</target>
	
	<target
		name="Beaver Parser"
		description="Generate the parser used by SIPLE version 1 and 2.">
		<echo message="========================> Generate Beaver Parser &lt;======================"/>
		<taskdef
			name		= "beaver"
			classname	= "beaver.comp.run.AntTask"
			classpath	= "${_basedir}/sources/libraries/beaver.jar"
		/>
		<property name="beaver.available" value="yes"/>
		<beaver
			file				= "syntax/parser.beaver"
			destdir				= "${_basedir}/src-gen"
			compress			= "yes"
			exportTables		= "no"
			sortTerminals		= "no"
			terminalNames		= "yes"
			exportTerminals		= "no"
			useSwitch			= "no"
			anonymousActions	= "yes"
			reportActions		= "no"
		/>
	</target>
	
	<target
		name="JastAdd Semantic"
		description="Generate the semantic evaluator used by SIPLE version 1.">
		<echo message="======================> Generate JastAdd Semantic &lt;====================="/>
		<jastadd
			outdir="${_basedir}/src-gen"
			package="org.jastemf.siple.ast"
			rewrite		= "true">
			<fileset dir="${_basedir}/specifications">
				<include name="siple/semantics/**/*.ast"/>
				<include name="siple/semantics/**/*.jrag"/>
				<include name="siple/semantics/**/*.jadd"/>
			</fileset>
		</jastadd>
	</target>
	
	<target
		name="EMF Semantic"
		description="Generate the semantic evaluator used by SIPLE version 2 and 3.">
		<echo message="========================> Generate EMF Semantic &lt;======================="/>
		<jastemf
			generateeditcode="true"
			programmaticrefactorings="true"
			genmodel="${_basedir}/specifications/siple/model/siple.genmodel"
			outpackage="jastemf.adaptation"
			astpackage="org.jastemf.siple.ast">
			<fileset dir="${_basedir}/specifications">
				<include name="siple/semantics/**/*.ast"/>
				<include name="siple/semantics/**/*.jrag"/>
				<include name="siple/semantics/**/*.jadd"/>
			</fileset>
		</jastemf>
	</target>
	
	<target
		name="RTT JastAdd Integration"
		description="Generate regression test tool support for compiler version 1.">
		<echo message="================> Integrate Regression-Test-Tool (RTT) &lt;================"/>
		<copy todir="${_basedir}/src-gen/rtt/adaptation">
			<fileset dir="${_basedir}/tests/adaptation/JastAdd">
				<include name="**/*.aj"/>
				<include name="**/*.java"/>
			</fileset>
		</copy>
	</target>
	
	<target
		name="RTT EMF Integration"
		description="Generate regression test tool support for compiler version 2.">
		<echo message="================> Integrate Regression-Test-Tool (RTT) &lt;================"/>
		<copy todir="${_basedir}/src-gen/rtt/adaptation">
			<fileset dir="${_basedir}/tests/adaptation/EMF">
				<include name="**/*.aj"/>
				<include name="**/*.java"/>
			</fileset>
		</copy>
	</target>
	
	<!--
		Generate a JastAdd AST specification based on the generator model.
		
		BEWARE: The JastEMF converter is a research prototyp in alpha state
			and does not yet satisfy JastEMF's quality criteria.
	-->
	<target name="Generate AST Spec">
		<echo message="========================> Generate AST Spec &lt;======================="/>
		<jastemf.ecore2ast
			modelFile="${_basedir}/specifications/siple/model/siple.ecore"
			outputDirectory="${_basedir}/src-gen/jastemf/adaptation">
		</jastemf.ecore2ast>
	</target>
	
	<!--
		Generate a JastAdd *.jrag attribution skeleton based on the generator
		model.
		
		BEWARE: The JastEMF converter is a research prototyp in alpha state
			and does not yet satisfy JastEMF's quality criteria.
	-->
	<target name="Generate initial Jrag Spec">
		<echo message="========================> Generate AST Spec &lt;======================="/>
		<jastemf.ecore2jrag
			modelFile="${_basedir}/specifications/siple/model/siple.ecore"
			outputDirectory="${_basedir}/src-gen/jastemf/adaptation">
		</jastemf.ecore2jrag>
	</target>
</project>
