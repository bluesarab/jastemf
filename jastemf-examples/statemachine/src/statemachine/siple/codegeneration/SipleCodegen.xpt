«IMPORT statemachine»
«EXTENSION statemachine::siple::codegeneration::Extensions»

«DEFINE main(String outpath) FOR StateMachine»
«FILE outpath-»
% Generated SIPLE state machine implementation
Procedure main() Begin
«IF this.machineVariables.size > 0-»
	% Global variables:
«ENDIF-»
«FOREACH this.machineVariables AS var-»
	Var «var.name»:«var.type»;
«ENDFOREACH-»
«LET this.declarations.typeSelect(Transition).select(t|t.source == this.declarations.typeSelect(statemachine::InitialState).get(0)).get(0) AS initTransition-»
«IF initTransition.actionLabel != null && initTransition.actionLabel.trim().length > 0-»
	% Initial transition action:
	«initTransition.actionLabel»
«ENDIF-»
«ENDLET-»
	
	Var current_state:Integer;
	current_state := «this.declarations.typeSelect(statemachine::InitialState).get(0).successors.get(0).id»;
	While Not (current_state = «this.declarations.typeSelect(statemachine::FinalState).get(0).id») Do
		Var done:Boolean;
		done := false;
		
«FOREACH this.declarations.typeSelect(statemachine::NormalState) AS state-»
		If Not done And current_state = «state.id» Then
			«IF state.entry != null»«state.entry.actionLabel»«ENDIF»
			
«FOREACH this.declarations.typeSelect(Transition).select(t|t.source == state) AS transition-»
			If Not done And «IF transition.guardLabel != null && transition.guardLabel.trim().length > 0-»«transition.guardLabel»«ELSE-»true«ENDIF-» Then
«IF transition.actionLabel != null && transition.actionLabel.trim().length > 0-»
				«transition.actionLabel»
«ENDIF-»
				current_state := «transition.target.id»;
				done := true;
			Fi;
«ENDFOREACH-»
		Fi;
«ENDFOREACH-»
	Od;
End;
«ENDFILE-»
«ENDDEFINE»
